

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Sat Nov 07 17:34:02 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	18F46K20
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    31                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    32  0000                     
    33                           ; Version 2.20
    34                           ; Generated 05/05/2020 GMT
    35                           ; 
    36                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC18F46K20 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     
    68                           	psect	idataCOMRAM
    69  00F6D4                     __pidataCOMRAM:
    70                           	callstack 0
    71                           
    72                           ;initializer for _port_register
    73  00F6D4  80                 	db	128
    74  00F6D5  0F                 	db	15
    75  00F6D6  81                 	db	129
    76  00F6D7  0F                 	db	15
    77  00F6D8  82                 	db	130
    78  00F6D9  0F                 	db	15
    79  00F6DA  83                 	db	131
    80  00F6DB  0F                 	db	15
    81  00F6DC  84                 	db	132
    82  00F6DD  0F                 	db	15
    83                           
    84                           ;initializer for _lat_register
    85  00F6DE  89                 	db	137
    86  00F6DF  0F                 	db	15
    87  00F6E0  8A                 	db	138
    88  00F6E1  0F                 	db	15
    89  00F6E2  8B                 	db	139
    90  00F6E3  0F                 	db	15
    91  00F6E4  8C                 	db	140
    92  00F6E5  0F                 	db	15
    93  00F6E6  8D                 	db	141
    94  00F6E7  0F                 	db	15
    95                           
    96                           ;initializer for _tris_register
    97  00F6E8  92                 	db	146
    98  00F6E9  0F                 	db	15
    99  00F6EA  93                 	db	147
   100  00F6EB  0F                 	db	15
   101  00F6EC  94                 	db	148
   102  00F6ED  0F                 	db	15
   103  00F6EE  95                 	db	149
   104  00F6EF  0F                 	db	15
   105  00F6F0  96                 	db	150
   106  00F6F1  0F                 	db	15
   107                           
   108                           ;initializer for _btn
   109  00F6F2  03                 	db	3
   110  00F6F3  13                 	db	19
   111  00F6F4  23                 	db	35
   112  00F6F5  33                 	db	51
   113  0000                     _PORTE	set	3972
   114  0000                     _PORTD	set	3971
   115  0000                     _PORTC	set	3970
   116  0000                     _PORTB	set	3969
   117  0000                     _PORTA	set	3968
   118  0000                     _LATE	set	3981
   119  0000                     _LATD	set	3980
   120  0000                     _LATC	set	3979
   121  0000                     _LATB	set	3978
   122  0000                     _LATA	set	3977
   123  0000                     _TRISE	set	3990
   124  0000                     _TRISD	set	3989
   125  0000                     _TRISC	set	3988
   126  0000                     _TRISB	set	3987
   127  0000                     _TRISA	set	3986
   128                           
   129                           ; #config settings
   130                           
   131                           	psect	cinit
   132  00F88E                     __pcinit:
   133                           	callstack 0
   134  00F88E                     start_initialization:
   135                           	callstack 0
   136  00F88E                     __initialization:
   137                           	callstack 0
   138                           
   139                           ; Initialize objects allocated to COMRAM (34 bytes)
   140                           ; load TBLPTR registers with __pidataCOMRAM
   141  00F88E  0ED4               	movlw	low __pidataCOMRAM
   142  00F890  6EF6               	movwf	tblptrl,c
   143  00F892  0EF6               	movlw	high __pidataCOMRAM
   144  00F894  6EF7               	movwf	tblptrh,c
   145  00F896  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   146  00F898  6EF8               	movwf	tblptru,c
   147  00F89A  EE00  F001         	lfsr	0,__pdataCOMRAM
   148  00F89E  EE10 F022          	lfsr	1,34
   149  00F8A2                     copy_data0:
   150  00F8A2  0009               	tblrd		*+
   151  00F8A4  CFF5 FFEE          	movff	tablat,postinc0
   152  00F8A8  50E5               	movf	postdec1,w,c
   153  00F8AA  50E1               	movf	fsr1l,w,c
   154  00F8AC  E1FA               	bnz	copy_data0
   155                           
   156                           ; Clear objects allocated to COMRAM (13 bytes)
   157  00F8AE  EE00  F035         	lfsr	0,__pbssCOMRAM
   158  00F8B2  0E0D               	movlw	13
   159  00F8B4                     clear_0:
   160  00F8B4  6AEE               	clrf	postinc0,c
   161  00F8B6  06E8               	decf	wreg,f,c
   162  00F8B8  E1FD               	bnz	clear_0
   163  00F8BA                     end_of_initialization:
   164                           	callstack 0
   165  00F8BA                     __end_of__initialization:
   166                           	callstack 0
   167  00F8BA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   168  00F8BC  6EF8               	movwf	tblptru,c
   169  00F8BE  0100               	movlb	0
   170  00F8C0  EFE2  F07E         	goto	_main	;jump to C main() function
   171                           
   172                           	psect	bssCOMRAM
   173  000035                     __pbssCOMRAM:
   174                           	callstack 0
   175  000035                     _i:
   176                           	callstack 0
   177  000035                     	ds	1
   178  000036                     _btn_status:
   179                           	callstack 0
   180  000036                     	ds	4
   181  00003A                     _motor4:
   182                           	callstack 0
   183  00003A                     	ds	2
   184  00003C                     _motor3:
   185                           	callstack 0
   186  00003C                     	ds	2
   187  00003E                     _motor2:
   188                           	callstack 0
   189  00003E                     	ds	2
   190  000040                     _motor1:
   191                           	callstack 0
   192  000040                     	ds	2
   193                           
   194                           	psect	dataCOMRAM
   195  000001                     __pdataCOMRAM:
   196                           	callstack 0
   197  000001                     _port_register:
   198                           	callstack 0
   199  000001                     	ds	10
   200  00000B                     _lat_register:
   201                           	callstack 0
   202  00000B                     	ds	10
   203  000015                     _tris_register:
   204                           	callstack 0
   205  000015                     	ds	10
   206  00001F                     _btn:
   207                           	callstack 0
   208  00001F                     	ds	4
   209                           
   210                           	psect	cstackCOMRAM
   211  000023                     __pcstackCOMRAM:
   212                           	callstack 0
   213  000023                     gpio_pin_direction_initialize@pin:
   214                           	callstack 0
   215  000023                     gpio_pin_write_value@pin:
   216                           	callstack 0
   217  000023                     gpio_pin_read_status@pin:
   218                           	callstack 0
   219                           
   220                           ; 1 bytes @ 0x0
   221  000023                     	ds	1
   222  000024                     gpio_pin_direction_initialize@direction:
   223                           	callstack 0
   224  000024                     gpio_pin_write_value@logic:
   225                           	callstack 0
   226  000024                     gpio_pin_read_status@logic:
   227                           	callstack 0
   228                           
   229                           ; 2 bytes @ 0x1
   230  000024                     	ds	1
   231  000025                     ??_gpio_pin_direction_initialize:
   232  000025                     ??_gpio_pin_write_value:
   233                           
   234                           ; 1 bytes @ 0x2
   235  000025                     	ds	1
   236  000026                     ??_gpio_pin_read_status:
   237                           
   238                           ; 1 bytes @ 0x3
   239  000026                     	ds	5
   240  00002B                     gpio_pin_direction_initialize@port:
   241                           	callstack 0
   242  00002B                     gpio_pin_write_value@port:
   243                           	callstack 0
   244  00002B                     gpio_pin_read_status@port:
   245                           	callstack 0
   246                           
   247                           ; 1 bytes @ 0x8
   248  00002B                     	ds	1
   249  00002C                     button_initialize@btn:
   250                           	callstack 0
   251  00002C                     button_get_status@btn:
   252                           	callstack 0
   253  00002C                     relay_initialize@relay:
   254                           	callstack 0
   255  00002C                     relay_turn_on@relay:
   256                           	callstack 0
   257  00002C                     relay_turn_off@relay:
   258                           	callstack 0
   259                           
   260                           ; 2 bytes @ 0x9
   261  00002C                     	ds	2
   262  00002E                     ??_button_initialize:
   263  00002E                     ??_relay_initialize:
   264  00002E                     ??_relay_turn_on:
   265  00002E                     ??_relay_turn_off:
   266  00002E                     button_get_status@btn_status:
   267                           	callstack 0
   268                           
   269                           ; 2 bytes @ 0xB
   270  00002E                     	ds	2
   271  000030                     ??_button_get_status:
   272  000030                     dc_motor_initialize@dc_mtor:
   273                           	callstack 0
   274  000030                     dc_motor_rotate_right@dc_mtor:
   275                           	callstack 0
   276  000030                     dc_motor_rotate_left@dc_mtor:
   277                           	callstack 0
   278  000030                     dc_motor_stop@dc_mtor:
   279                           	callstack 0
   280                           
   281                           ; 2 bytes @ 0xD
   282  000030                     	ds	2
   283  000032                     
   284                           ; 1 bytes @ 0xF
   285  000032                     	ds	1
   286  000033                     ??_robot_stop:
   287                           
   288                           ; 1 bytes @ 0x10
   289  000033                     	ds	2
   290  000035                     
   291                           ; 1 bytes @ 0x12
   292 ;;
   293 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   294 ;;
   295 ;; *************** function _main *****************
   296 ;; Defined at:
   297 ;;		line 29 in file "application.c"
   298 ;; Parameters:    Size  Location     Type
   299 ;;		None
   300 ;; Auto vars:     Size  Location     Type
   301 ;;		None
   302 ;; Return value:  Size  Location     Type
   303 ;;                  2  214[None  ] int 
   304 ;; Registers used:
   305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   306 ;; Tracked objects:
   307 ;;		On entry : 0/0
   308 ;;		On exit  : 0/0
   309 ;;		Unchanged: 0/0
   310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   315 ;;Total ram usage:        0 bytes
   316 ;; Hardware stack levels required when called:    4
   317 ;; This function calls:
   318 ;;		_button_get_status
   319 ;;		_button_initialize
   320 ;;		_dc_motor_initialize
   321 ;;		_robot_move_backward
   322 ;;		_robot_move_forward
   323 ;;		_robot_move_left
   324 ;;		_robot_move_right
   325 ;;		_robot_stop
   326 ;; This function is called by:
   327 ;;		Startup code after reset
   328 ;; This function uses a non-reentrant model
   329 ;;
   330                           
   331                           	psect	text0
   332  00FDC4                     __ptext0:
   333                           	callstack 0
   334  00FDC4                     _main:
   335                           	callstack 27
   336  00FDC4                     
   337                           ;application.c: 31:     motor1.relay1.port_name=PORTC_INDEX;
   338  00FDC4  5040               	movf	_motor1^0,w,c
   339  00FDC6  0BF0               	andlw	-16
   340  00FDC8  0902               	iorlw	2
   341  00FDCA  6E40               	movwf	_motor1^0,c
   342                           
   343                           ;application.c: 32:     motor1.relay1.pin=PIN0;
   344  00FDCC  0E8F               	movlw	-113
   345  00FDCE  1640               	andwf	_motor1^0,f,c
   346  00FDD0                     
   347                           ;application.c: 33:     motor1.relay1.relay_status=RELAY_OFF;
   348  00FDD0  9E40               	bcf	_motor1^0,7,c
   349                           
   350                           ;application.c: 34:     motor1.relay2.port_name=PORTC_INDEX;
   351  00FDD2  5041               	movf	(_motor1+1)^0,w,c
   352  00FDD4  0BF0               	andlw	-16
   353  00FDD6  0902               	iorlw	2
   354  00FDD8  6E41               	movwf	(_motor1+1)^0,c
   355                           
   356                           ;application.c: 35:     motor1.relay2.pin=PIN1;
   357  00FDDA  5041               	movf	(_motor1+1)^0,w,c
   358  00FDDC  0B8F               	andlw	-113
   359  00FDDE  0910               	iorlw	16
   360  00FDE0  6E41               	movwf	(_motor1+1)^0,c
   361  00FDE2                     
   362                           ;application.c: 36:     motor1.relay2.relay_status=RELAY_OFF;
   363  00FDE2  9E41               	bcf	(_motor1+1)^0,7,c
   364  00FDE4                     
   365                           ;application.c: 37:     dc_motor_initialize(&motor1);
   366  00FDE4  0E40               	movlw	low _motor1
   367  00FDE6  6E30               	movwf	dc_motor_initialize@dc_mtor^0,c
   368  00FDE8  0E00               	movlw	high _motor1
   369  00FDEA  6E31               	movwf	(dc_motor_initialize@dc_mtor+1)^0,c
   370  00FDEC  ECDF  F07B         	call	_dc_motor_initialize	;wreg free
   371  00FDF0                     
   372                           ;application.c: 39:     motor2.relay1.port_name=PORTC_INDEX;
   373  00FDF0  503E               	movf	_motor2^0,w,c
   374  00FDF2  0BF0               	andlw	-16
   375  00FDF4  0902               	iorlw	2
   376  00FDF6  6E3E               	movwf	_motor2^0,c
   377  00FDF8                     
   378                           ;application.c: 40:     motor2.relay1.pin=PIN2;
   379  00FDF8  503E               	movf	_motor2^0,w,c
   380  00FDFA  0B8F               	andlw	-113
   381  00FDFC  0920               	iorlw	32
   382  00FDFE  6E3E               	movwf	_motor2^0,c
   383  00FE00                     
   384                           ;application.c: 41:     motor2.relay1.relay_status=RELAY_OFF;
   385  00FE00  9E3E               	bcf	_motor2^0,7,c
   386  00FE02                     
   387                           ;application.c: 42:     motor2.relay2.port_name=PORTC_INDEX;
   388  00FE02  503F               	movf	(_motor2+1)^0,w,c
   389  00FE04  0BF0               	andlw	-16
   390  00FE06  0902               	iorlw	2
   391  00FE08  6E3F               	movwf	(_motor2+1)^0,c
   392  00FE0A                     
   393                           ;application.c: 43:     motor2.relay2.pin=PIN3;
   394  00FE0A  503F               	movf	(_motor2+1)^0,w,c
   395  00FE0C  0B8F               	andlw	-113
   396  00FE0E  0930               	iorlw	48
   397  00FE10  6E3F               	movwf	(_motor2+1)^0,c
   398  00FE12                     
   399                           ;application.c: 44:     motor2.relay2.relay_status=RELAY_OFF;
   400  00FE12  9E3F               	bcf	(_motor2+1)^0,7,c
   401  00FE14                     
   402                           ;application.c: 45:     dc_motor_initialize(&motor2);
   403  00FE14  0E3E               	movlw	low _motor2
   404  00FE16  6E30               	movwf	dc_motor_initialize@dc_mtor^0,c
   405  00FE18  0E00               	movlw	high _motor2
   406  00FE1A  6E31               	movwf	(dc_motor_initialize@dc_mtor+1)^0,c
   407  00FE1C  ECDF  F07B         	call	_dc_motor_initialize	;wreg free
   408                           
   409                           ;application.c: 47:     motor3.relay1.port_name=PORTC_INDEX;
   410  00FE20  503C               	movf	_motor3^0,w,c
   411  00FE22  0BF0               	andlw	-16
   412  00FE24  0902               	iorlw	2
   413  00FE26  6E3C               	movwf	_motor3^0,c
   414                           
   415                           ;application.c: 48:     motor3.relay1.pin=PIN4;
   416  00FE28  503C               	movf	_motor3^0,w,c
   417  00FE2A  0B8F               	andlw	-113
   418  00FE2C  0940               	iorlw	64
   419  00FE2E  6E3C               	movwf	_motor3^0,c
   420  00FE30                     
   421                           ;application.c: 49:     motor3.relay1.relay_status=RELAY_OFF;
   422  00FE30  9E3C               	bcf	_motor3^0,7,c
   423                           
   424                           ;application.c: 50:     motor3.relay2.port_name=PORTC_INDEX;
   425  00FE32  503D               	movf	(_motor3+1)^0,w,c
   426  00FE34  0BF0               	andlw	-16
   427  00FE36  0902               	iorlw	2
   428  00FE38  6E3D               	movwf	(_motor3+1)^0,c
   429                           
   430                           ;application.c: 51:     motor3.relay2.pin=PIN5;
   431  00FE3A  503D               	movf	(_motor3+1)^0,w,c
   432  00FE3C  0B8F               	andlw	-113
   433  00FE3E  0950               	iorlw	80
   434  00FE40  6E3D               	movwf	(_motor3+1)^0,c
   435  00FE42                     
   436                           ;application.c: 52:     motor3.relay2.relay_status=RELAY_OFF;
   437  00FE42  9E3D               	bcf	(_motor3+1)^0,7,c
   438  00FE44                     
   439                           ;application.c: 53:     dc_motor_initialize(&motor3);
   440  00FE44  0E3C               	movlw	low _motor3
   441  00FE46  6E30               	movwf	dc_motor_initialize@dc_mtor^0,c
   442  00FE48  0E00               	movlw	high _motor3
   443  00FE4A  6E31               	movwf	(dc_motor_initialize@dc_mtor+1)^0,c
   444  00FE4C  ECDF  F07B         	call	_dc_motor_initialize	;wreg free
   445  00FE50                     
   446                           ;application.c: 55:     motor4.relay1.port_name=PORTC_INDEX;
   447  00FE50  503A               	movf	_motor4^0,w,c
   448  00FE52  0BF0               	andlw	-16
   449  00FE54  0902               	iorlw	2
   450  00FE56  6E3A               	movwf	_motor4^0,c
   451  00FE58                     
   452                           ;application.c: 56:     motor4.relay1.pin=PIN6;
   453  00FE58  503A               	movf	_motor4^0,w,c
   454  00FE5A  0B8F               	andlw	-113
   455  00FE5C  0960               	iorlw	96
   456  00FE5E  6E3A               	movwf	_motor4^0,c
   457  00FE60                     
   458                           ;application.c: 57:     motor4.relay1.relay_status=RELAY_OFF;
   459  00FE60  9E3A               	bcf	_motor4^0,7,c
   460  00FE62                     
   461                           ;application.c: 58:     motor4.relay2.port_name=PORTC_INDEX;
   462  00FE62  503B               	movf	(_motor4+1)^0,w,c
   463  00FE64  0BF0               	andlw	-16
   464  00FE66  0902               	iorlw	2
   465  00FE68  6E3B               	movwf	(_motor4+1)^0,c
   466  00FE6A                     
   467                           ;application.c: 59:     motor4.relay2.pin=PIN7;
   468  00FE6A  0E70               	movlw	112
   469  00FE6C  123B               	iorwf	(_motor4+1)^0,f,c
   470  00FE6E                     
   471                           ;application.c: 60:     motor4.relay2.relay_status=RELAY_OFF;
   472  00FE6E  9E3B               	bcf	(_motor4+1)^0,7,c
   473  00FE70                     
   474                           ;application.c: 61:     dc_motor_initialize(&motor4);
   475  00FE70  0E3A               	movlw	low _motor4
   476  00FE72  6E30               	movwf	dc_motor_initialize@dc_mtor^0,c
   477  00FE74  0E00               	movlw	high _motor4
   478  00FE76  6E31               	movwf	(dc_motor_initialize@dc_mtor+1)^0,c
   479  00FE78  ECDF  F07B         	call	_dc_motor_initialize	;wreg free
   480                           
   481                           ;application.c: 62:     for(i=0;i<4;i++){
   482  00FE7C  0E00               	movlw	0
   483  00FE7E  6E35               	movwf	_i^0,c
   484  00FE80                     l1808:
   485                           
   486                           ;application.c: 63:         button_initialize(&btn[i]);
   487  00FE80  0E1F               	movlw	low _btn
   488  00FE82  2435               	addwf	_i^0,w,c
   489  00FE84  6E2C               	movwf	button_initialize@btn^0,c
   490  00FE86  6A2D               	clrf	(button_initialize@btn+1)^0,c
   491  00FE88  0E00               	movlw	high _btn
   492  00FE8A  222D               	addwfc	(button_initialize@btn+1)^0,f,c
   493  00FE8C  ECC0  F07C         	call	_button_initialize	;wreg free
   494  00FE90                     
   495                           ;application.c: 64:     }
   496  00FE90  2A35               	incf	_i^0,f,c
   497  00FE92  0E03               	movlw	3
   498  00FE94  6435               	cpfsgt	_i^0,c
   499  00FE96  EF4F  F07F         	goto	u1081
   500  00FE9A  EF51  F07F         	goto	u1080
   501  00FE9E                     u1081:
   502  00FE9E  EF40  F07F         	goto	l1808
   503  00FEA2                     u1080:
   504  00FEA2                     l1814:
   505                           
   506                           ;application.c: 66:        for(i=0;i<4;i++){
   507  00FEA2  0E00               	movlw	0
   508  00FEA4  6E35               	movwf	_i^0,c
   509  00FEA6                     l1820:
   510                           
   511                           ;application.c: 67:         button_get_status(&btn[i],&btn_status[i]);
   512  00FEA6  0E1F               	movlw	low _btn
   513  00FEA8  2435               	addwf	_i^0,w,c
   514  00FEAA  6E2C               	movwf	button_get_status@btn^0,c
   515  00FEAC  6A2D               	clrf	(button_get_status@btn+1)^0,c
   516  00FEAE  0E00               	movlw	high _btn
   517  00FEB0  222D               	addwfc	(button_get_status@btn+1)^0,f,c
   518  00FEB2  0E36               	movlw	low _btn_status
   519  00FEB4  2435               	addwf	_i^0,w,c
   520  00FEB6  6E2E               	movwf	button_get_status@btn_status^0,c
   521  00FEB8  6A2F               	clrf	(button_get_status@btn_status+1)^0,c
   522  00FEBA  0E00               	movlw	high _btn_status
   523  00FEBC  222F               	addwfc	(button_get_status@btn_status+1)^0,f,c
   524  00FEBE  EC7B  F07D         	call	_button_get_status	;wreg free
   525  00FEC2                     
   526                           ;application.c: 68:     }
   527  00FEC2  2A35               	incf	_i^0,f,c
   528  00FEC4  0E03               	movlw	3
   529  00FEC6  6435               	cpfsgt	_i^0,c
   530  00FEC8  EF68  F07F         	goto	u1091
   531  00FECC  EF6A  F07F         	goto	u1090
   532  00FED0                     u1091:
   533  00FED0  EF53  F07F         	goto	l1820
   534  00FED4                     u1090:
   535  00FED4                     
   536                           ;application.c: 70:        if(btn_status[0]==BUTTON_PRESSED && btn_status[1]==BUTTON_NOT
      +                          _PRESSED&& btn_status[2]==BUTTON_NOT_PRESSED&& btn_status[3]==BUTTON_NOT_PRESSED){
   537  00FED4  0436               	decf	_btn_status^0,w,c
   538  00FED6  A4D8               	btfss	status,2,c
   539  00FED8  EF70  F07F         	goto	u1101
   540  00FEDC  EF72  F07F         	goto	u1100
   541  00FEE0                     u1101:
   542  00FEE0  EF8E  F07F         	goto	l1836
   543  00FEE4                     u1100:
   544  00FEE4  5037               	movf	(_btn_status+1)^0,w,c
   545  00FEE6  A4D8               	btfss	status,2,c
   546  00FEE8  EF78  F07F         	goto	u1111
   547  00FEEC  EF7A  F07F         	goto	u1110
   548  00FEF0                     u1111:
   549  00FEF0  EF8E  F07F         	goto	l1836
   550  00FEF4                     u1110:
   551  00FEF4  5038               	movf	(_btn_status+2)^0,w,c
   552  00FEF6  A4D8               	btfss	status,2,c
   553  00FEF8  EF80  F07F         	goto	u1121
   554  00FEFC  EF82  F07F         	goto	u1120
   555  00FF00                     u1121:
   556  00FF00  EF8E  F07F         	goto	l1836
   557  00FF04                     u1120:
   558  00FF04  5039               	movf	(_btn_status+3)^0,w,c
   559  00FF06  A4D8               	btfss	status,2,c
   560  00FF08  EF88  F07F         	goto	u1131
   561  00FF0C  EF8A  F07F         	goto	u1130
   562  00FF10                     u1131:
   563  00FF10  EF8E  F07F         	goto	l1836
   564  00FF14                     u1130:
   565  00FF14                     
   566                           ;application.c: 71:            robot_move_forward();
   567  00FF14  EC94  F07B         	call	_robot_move_forward	;wreg free
   568                           
   569                           ;application.c: 72:        }else if(btn_status[0]==BUTTON_NOT_PRESSED && btn_status[1]==
      +                          BUTTON_PRESSED &&btn_status[2]==BUTTON_NOT_PRESSED && btn_status[3]==BUTTON_NOT_PRESSED)
      +                          {
   570  00FF18  EF51  F07F         	goto	l1814
   571  00FF1C                     l1836:
   572  00FF1C  5036               	movf	_btn_status^0,w,c
   573  00FF1E  A4D8               	btfss	status,2,c
   574  00FF20  EF94  F07F         	goto	u1141
   575  00FF24  EF96  F07F         	goto	u1140
   576  00FF28                     u1141:
   577  00FF28  EFB2  F07F         	goto	l1846
   578  00FF2C                     u1140:
   579  00FF2C  0437               	decf	(_btn_status+1)^0,w,c
   580  00FF2E  A4D8               	btfss	status,2,c
   581  00FF30  EF9C  F07F         	goto	u1151
   582  00FF34  EF9E  F07F         	goto	u1150
   583  00FF38                     u1151:
   584  00FF38  EFB2  F07F         	goto	l1846
   585  00FF3C                     u1150:
   586  00FF3C  5038               	movf	(_btn_status+2)^0,w,c
   587  00FF3E  A4D8               	btfss	status,2,c
   588  00FF40  EFA4  F07F         	goto	u1161
   589  00FF44  EFA6  F07F         	goto	u1160
   590  00FF48                     u1161:
   591  00FF48  EFB2  F07F         	goto	l1846
   592  00FF4C                     u1160:
   593  00FF4C  5039               	movf	(_btn_status+3)^0,w,c
   594  00FF4E  A4D8               	btfss	status,2,c
   595  00FF50  EFAC  F07F         	goto	u1171
   596  00FF54  EFAE  F07F         	goto	u1170
   597  00FF58                     u1171:
   598  00FF58  EFB2  F07F         	goto	l1846
   599  00FF5C                     u1170:
   600  00FF5C                     
   601                           ;application.c: 73:           robot_move_backward();
   602  00FF5C  EC7B  F07B         	call	_robot_move_backward	;wreg free
   603                           
   604                           ;application.c: 74:        }else if(btn_status[0]==BUTTON_NOT_PRESSED && btn_status[1]==
      +                          BUTTON_NOT_PRESSED &&btn_status[2]==BUTTON_PRESSED && btn_status[3]==BUTTON_NOT_PRESSED)
      +                          {
   605  00FF60  EF51  F07F         	goto	l1814
   606  00FF64                     l1846:
   607  00FF64  5036               	movf	_btn_status^0,w,c
   608  00FF66  A4D8               	btfss	status,2,c
   609  00FF68  EFB8  F07F         	goto	u1181
   610  00FF6C  EFBA  F07F         	goto	u1180
   611  00FF70                     u1181:
   612  00FF70  EFD6  F07F         	goto	l1856
   613  00FF74                     u1180:
   614  00FF74  5037               	movf	(_btn_status+1)^0,w,c
   615  00FF76  A4D8               	btfss	status,2,c
   616  00FF78  EFC0  F07F         	goto	u1191
   617  00FF7C  EFC2  F07F         	goto	u1190
   618  00FF80                     u1191:
   619  00FF80  EFD6  F07F         	goto	l1856
   620  00FF84                     u1190:
   621  00FF84  0438               	decf	(_btn_status+2)^0,w,c
   622  00FF86  A4D8               	btfss	status,2,c
   623  00FF88  EFC8  F07F         	goto	u1201
   624  00FF8C  EFCA  F07F         	goto	u1200
   625  00FF90                     u1201:
   626  00FF90  EFD6  F07F         	goto	l1856
   627  00FF94                     u1200:
   628  00FF94  5039               	movf	(_btn_status+3)^0,w,c
   629  00FF96  A4D8               	btfss	status,2,c
   630  00FF98  EFD0  F07F         	goto	u1211
   631  00FF9C  EFD2  F07F         	goto	u1210
   632  00FFA0                     u1211:
   633  00FFA0  EFD6  F07F         	goto	l1856
   634  00FFA4                     u1210:
   635  00FFA4                     
   636                           ;application.c: 75:            robot_move_right();
   637  00FFA4  ECC6  F07B         	call	_robot_move_right	;wreg free
   638                           
   639                           ;application.c: 76:        }else if(btn_status[0]==BUTTON_NOT_PRESSED && btn_status[1]==
      +                          BUTTON_NOT_PRESSED &&btn_status[2]==BUTTON_NOT_PRESSED && btn_status[3]==BUTTON_PRESSED)
      +                          {
   640  00FFA8  EF51  F07F         	goto	l1814
   641  00FFAC                     l1856:
   642  00FFAC  5036               	movf	_btn_status^0,w,c
   643  00FFAE  A4D8               	btfss	status,2,c
   644  00FFB0  EFDC  F07F         	goto	u1221
   645  00FFB4  EFDE  F07F         	goto	u1220
   646  00FFB8                     u1221:
   647  00FFB8  EFFA  F07F         	goto	l1866
   648  00FFBC                     u1220:
   649  00FFBC  5037               	movf	(_btn_status+1)^0,w,c
   650  00FFBE  A4D8               	btfss	status,2,c
   651  00FFC0  EFE4  F07F         	goto	u1231
   652  00FFC4  EFE6  F07F         	goto	u1230
   653  00FFC8                     u1231:
   654  00FFC8  EFFA  F07F         	goto	l1866
   655  00FFCC                     u1230:
   656  00FFCC  5038               	movf	(_btn_status+2)^0,w,c
   657  00FFCE  A4D8               	btfss	status,2,c
   658  00FFD0  EFEC  F07F         	goto	u1241
   659  00FFD4  EFEE  F07F         	goto	u1240
   660  00FFD8                     u1241:
   661  00FFD8  EFFA  F07F         	goto	l1866
   662  00FFDC                     u1240:
   663  00FFDC  0439               	decf	(_btn_status+3)^0,w,c
   664  00FFDE  A4D8               	btfss	status,2,c
   665  00FFE0  EFF4  F07F         	goto	u1251
   666  00FFE4  EFF6  F07F         	goto	u1250
   667  00FFE8                     u1251:
   668  00FFE8  EFFA  F07F         	goto	l1866
   669  00FFEC                     u1250:
   670  00FFEC                     
   671                           ;application.c: 77:            robot_move_left();
   672  00FFEC  ECAD  F07B         	call	_robot_move_left	;wreg free
   673                           
   674                           ;application.c: 78:        }
   675  00FFF0  EF51  F07F         	goto	l1814
   676  00FFF4                     l1866:
   677                           
   678                           ;application.c: 80:           robot_stop();
   679  00FFF4  EC62  F07C         	call	_robot_stop	;wreg free
   680  00FFF8  EF51  F07F         	goto	l1814
   681  00FFFC  EF00  F000         	goto	start
   682  010000                     __end_of_main:
   683                           	callstack 0
   684                           
   685 ;; *************** function _robot_stop *****************
   686 ;; Defined at:
   687 ;;		line 111 in file "application.c"
   688 ;; Parameters:    Size  Location     Type
   689 ;;		None
   690 ;; Auto vars:     Size  Location     Type
   691 ;;		None
   692 ;; Return value:  Size  Location     Type
   693 ;;                  1    wreg      void 
   694 ;; Registers used:
   695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   696 ;; Tracked objects:
   697 ;;		On entry : 0/0
   698 ;;		On exit  : 0/0
   699 ;;		Unchanged: 0/0
   700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   703 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   704 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   705 ;;Total ram usage:        2 bytes
   706 ;; Hardware stack levels used:    1
   707 ;; Hardware stack levels required when called:    3
   708 ;; This function calls:
   709 ;;		_dc_motor_stop
   710 ;; This function is called by:
   711 ;;		_main
   712 ;; This function uses a non-reentrant model
   713 ;;
   714                           
   715                           	psect	text1
   716  00F8C4                     __ptext1:
   717                           	callstack 0
   718  00F8C4                     _robot_stop:
   719                           	callstack 27
   720  00F8C4                     
   721                           ;application.c: 112:     dc_motor_stop(&motor1);
   722  00F8C4  0E40               	movlw	low _motor1
   723  00F8C6  6E30               	movwf	dc_motor_stop@dc_mtor^0,c
   724  00F8C8  0E00               	movlw	high _motor1
   725  00F8CA  6E31               	movwf	(dc_motor_stop@dc_mtor+1)^0,c
   726  00F8CC  EC2D  F07C         	call	_dc_motor_stop	;wreg free
   727                           
   728                           ;application.c: 113:     dc_motor_stop(&motor2);
   729  00F8D0  0E3E               	movlw	low _motor2
   730  00F8D2  6E30               	movwf	dc_motor_stop@dc_mtor^0,c
   731  00F8D4  0E00               	movlw	high _motor2
   732  00F8D6  6E31               	movwf	(dc_motor_stop@dc_mtor+1)^0,c
   733  00F8D8  EC2D  F07C         	call	_dc_motor_stop	;wreg free
   734                           
   735                           ;application.c: 114:     dc_motor_stop(&motor3);
   736  00F8DC  0E3C               	movlw	low _motor3
   737  00F8DE  6E30               	movwf	dc_motor_stop@dc_mtor^0,c
   738  00F8E0  0E00               	movlw	high _motor3
   739  00F8E2  6E31               	movwf	(dc_motor_stop@dc_mtor+1)^0,c
   740  00F8E4  EC2D  F07C         	call	_dc_motor_stop	;wreg free
   741                           
   742                           ;application.c: 115:     dc_motor_stop(&motor4);
   743  00F8E8  0E3A               	movlw	low _motor4
   744  00F8EA  6E30               	movwf	dc_motor_stop@dc_mtor^0,c
   745  00F8EC  0E00               	movlw	high _motor4
   746  00F8EE  6E31               	movwf	(dc_motor_stop@dc_mtor+1)^0,c
   747  00F8F0  EC2D  F07C         	call	_dc_motor_stop	;wreg free
   748  00F8F4                     
   749                           ;application.c: 116:     _delay((unsigned long)((100)*(8000000UL/4000.0)));
   750  00F8F4  0E02               	movlw	2
   751  00F8F6  6E34               	movwf	(??_robot_stop+1)^0,c
   752  00F8F8  0E04               	movlw	4
   753  00F8FA  6E33               	movwf	??_robot_stop^0,c
   754  00F8FC  0EBA               	movlw	186
   755  00F8FE                     u1267:
   756  00F8FE  2EE8               	decfsz	wreg,f,c
   757  00F900  D7FE               	bra	u1267
   758  00F902  2E33               	decfsz	??_robot_stop^0,f,c
   759  00F904  D7FC               	bra	u1267
   760  00F906  2E34               	decfsz	(??_robot_stop+1)^0,f,c
   761  00F908  D7FA               	bra	u1267
   762  00F90A  F000 F000          	nop2	
   763  00F90E  0012               	return		;funcret
   764  00F910                     __end_of_robot_stop:
   765                           	callstack 0
   766                           
   767 ;; *************** function _robot_move_right *****************
   768 ;; Defined at:
   769 ;;		line 99 in file "application.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;		None
   772 ;; Auto vars:     Size  Location     Type
   773 ;;		None
   774 ;; Return value:  Size  Location     Type
   775 ;;                  1    wreg      void 
   776 ;; Registers used:
   777 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   778 ;; Tracked objects:
   779 ;;		On entry : 0/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   787 ;;Total ram usage:        0 bytes
   788 ;; Hardware stack levels used:    1
   789 ;; Hardware stack levels required when called:    3
   790 ;; This function calls:
   791 ;;		_dc_motor_rotate_right
   792 ;;		_dc_motor_stop
   793 ;; This function is called by:
   794 ;;		_main
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           	psect	text2
   799  00F78C                     __ptext2:
   800                           	callstack 0
   801  00F78C                     _robot_move_right:
   802                           	callstack 27
   803  00F78C                     
   804                           ;application.c: 100:     dc_motor_stop(&motor1);
   805  00F78C  0E40               	movlw	low _motor1
   806  00F78E  6E30               	movwf	dc_motor_stop@dc_mtor^0,c
   807  00F790  0E00               	movlw	high _motor1
   808  00F792  6E31               	movwf	(dc_motor_stop@dc_mtor+1)^0,c
   809  00F794  EC2D  F07C         	call	_dc_motor_stop	;wreg free
   810                           
   811                           ;application.c: 101:     dc_motor_rotate_right(&motor2);
   812  00F798  0E3E               	movlw	low _motor2
   813  00F79A  6E30               	movwf	dc_motor_rotate_right@dc_mtor^0,c
   814  00F79C  0E00               	movlw	high _motor2
   815  00F79E  6E31               	movwf	(dc_motor_rotate_right@dc_mtor+1)^0,c
   816  00F7A0  EC13  F07C         	call	_dc_motor_rotate_right	;wreg free
   817                           
   818                           ;application.c: 102:     dc_motor_rotate_right(&motor3);
   819  00F7A4  0E3C               	movlw	low _motor3
   820  00F7A6  6E30               	movwf	dc_motor_rotate_right@dc_mtor^0,c
   821  00F7A8  0E00               	movlw	high _motor3
   822  00F7AA  6E31               	movwf	(dc_motor_rotate_right@dc_mtor+1)^0,c
   823  00F7AC  EC13  F07C         	call	_dc_motor_rotate_right	;wreg free
   824                           
   825                           ;application.c: 103:     dc_motor_stop(&motor4);
   826  00F7B0  0E3A               	movlw	low _motor4
   827  00F7B2  6E30               	movwf	dc_motor_stop@dc_mtor^0,c
   828  00F7B4  0E00               	movlw	high _motor4
   829  00F7B6  6E31               	movwf	(dc_motor_stop@dc_mtor+1)^0,c
   830  00F7B8  EC2D  F07C         	call	_dc_motor_stop	;wreg free
   831  00F7BC  0012               	return		;funcret
   832  00F7BE                     __end_of_robot_move_right:
   833                           	callstack 0
   834                           
   835 ;; *************** function _robot_move_left *****************
   836 ;; Defined at:
   837 ;;		line 105 in file "application.c"
   838 ;; Parameters:    Size  Location     Type
   839 ;;		None
   840 ;; Auto vars:     Size  Location     Type
   841 ;;		None
   842 ;; Return value:  Size  Location     Type
   843 ;;                  1    wreg      void 
   844 ;; Registers used:
   845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   846 ;; Tracked objects:
   847 ;;		On entry : 0/0
   848 ;;		On exit  : 0/0
   849 ;;		Unchanged: 0/0
   850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   855 ;;Total ram usage:        0 bytes
   856 ;; Hardware stack levels used:    1
   857 ;; Hardware stack levels required when called:    3
   858 ;; This function calls:
   859 ;;		_dc_motor_rotate_left
   860 ;;		_dc_motor_stop
   861 ;; This function is called by:
   862 ;;		_main
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           	psect	text3
   867  00F75A                     __ptext3:
   868                           	callstack 0
   869  00F75A                     _robot_move_left:
   870                           	callstack 27
   871  00F75A                     
   872                           ;application.c: 106:     dc_motor_rotate_left(&motor1);
   873  00F75A  0E40               	movlw	low _motor1
   874  00F75C  6E30               	movwf	dc_motor_rotate_left@dc_mtor^0,c
   875  00F75E  0E00               	movlw	high _motor1
   876  00F760  6E31               	movwf	(dc_motor_rotate_left@dc_mtor+1)^0,c
   877  00F762  ECF9  F07B         	call	_dc_motor_rotate_left	;wreg free
   878                           
   879                           ;application.c: 107:     dc_motor_stop(&motor2);
   880  00F766  0E3E               	movlw	low _motor2
   881  00F768  6E30               	movwf	dc_motor_stop@dc_mtor^0,c
   882  00F76A  0E00               	movlw	high _motor2
   883  00F76C  6E31               	movwf	(dc_motor_stop@dc_mtor+1)^0,c
   884  00F76E  EC2D  F07C         	call	_dc_motor_stop	;wreg free
   885                           
   886                           ;application.c: 108:     dc_motor_stop(&motor3);
   887  00F772  0E3C               	movlw	low _motor3
   888  00F774  6E30               	movwf	dc_motor_stop@dc_mtor^0,c
   889  00F776  0E00               	movlw	high _motor3
   890  00F778  6E31               	movwf	(dc_motor_stop@dc_mtor+1)^0,c
   891  00F77A  EC2D  F07C         	call	_dc_motor_stop	;wreg free
   892                           
   893                           ;application.c: 109:     dc_motor_rotate_left(&motor4);
   894  00F77E  0E3A               	movlw	low _motor4
   895  00F780  6E30               	movwf	dc_motor_rotate_left@dc_mtor^0,c
   896  00F782  0E00               	movlw	high _motor4
   897  00F784  6E31               	movwf	(dc_motor_rotate_left@dc_mtor+1)^0,c
   898  00F786  ECF9  F07B         	call	_dc_motor_rotate_left	;wreg free
   899  00F78A  0012               	return		;funcret
   900  00F78C                     __end_of_robot_move_left:
   901                           	callstack 0
   902                           
   903 ;; *************** function _dc_motor_stop *****************
   904 ;; Defined at:
   905 ;;		line 49 in file "ecu/dc_motor/ecu_dc motor.c"
   906 ;; Parameters:    Size  Location     Type
   907 ;;  dc_mtor         2   13[COMRAM] PTR struct .
   908 ;;		 -> motor4(2), motor3(2), motor2(2), motor1(2), 
   909 ;; Auto vars:     Size  Location     Type
   910 ;;  ret             1    0        enum E13
   911 ;; Return value:  Size  Location     Type
   912 ;;                  1    wreg      enum E3006
   913 ;; Registers used:
   914 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   915 ;; Tracked objects:
   916 ;;		On entry : 0/0
   917 ;;		On exit  : 0/0
   918 ;;		Unchanged: 0/0
   919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   920 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   921 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   923 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   924 ;;Total ram usage:        3 bytes
   925 ;; Hardware stack levels used:    1
   926 ;; Hardware stack levels required when called:    2
   927 ;; This function calls:
   928 ;;		_relay_turn_off
   929 ;; This function is called by:
   930 ;;		_robot_move_right
   931 ;;		_robot_move_left
   932 ;;		_robot_stop
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           	psect	text4
   937  00F85A                     __ptext4:
   938                           	callstack 0
   939  00F85A                     _dc_motor_stop:
   940                           	callstack 27
   941  00F85A                     
   942                           ;ecu/dc_motor/ecu_dc motor.c: 51:     if(((void*)0) == dc_mtor){
   943  00F85A  5030               	movf	dc_motor_stop@dc_mtor^0,w,c
   944  00F85C  1031               	iorwf	(dc_motor_stop@dc_mtor+1)^0,w,c
   945  00F85E  A4D8               	btfss	status,2,c
   946  00F860  EF34  F07C         	goto	u881
   947  00F864  EF36  F07C         	goto	u880
   948  00F868                     u881:
   949  00F868  EF38  F07C         	goto	l1626
   950  00F86C                     u880:
   951  00F86C  EF46  F07C         	goto	l295
   952  00F870                     l1626:
   953                           
   954                           ;ecu/dc_motor/ecu_dc motor.c: 55:         relay_turn_off(&(dc_mtor->relay1));
   955  00F870  C030  F02C         	movff	dc_motor_stop@dc_mtor,relay_turn_off@relay
   956  00F874  C031  F02D         	movff	dc_motor_stop@dc_mtor+1,relay_turn_off@relay+1
   957  00F878  ECFB  F07C         	call	_relay_turn_off	;wreg free
   958                           
   959                           ;ecu/dc_motor/ecu_dc motor.c: 56:         relay_turn_off(&(dc_mtor->relay2));
   960  00F87C  0E01               	movlw	1
   961  00F87E  2430               	addwf	dc_motor_stop@dc_mtor^0,w,c
   962  00F880  6E2C               	movwf	relay_turn_off@relay^0,c
   963  00F882  0E00               	movlw	0
   964  00F884  2031               	addwfc	(dc_motor_stop@dc_mtor+1)^0,w,c
   965  00F886  6E2D               	movwf	(relay_turn_off@relay+1)^0,c
   966  00F888  ECFB  F07C         	call	_relay_turn_off	;wreg free
   967  00F88C                     l295:
   968  00F88C  0012               	return		;funcret
   969  00F88E                     __end_of_dc_motor_stop:
   970                           	callstack 0
   971                           
   972 ;; *************** function _robot_move_forward *****************
   973 ;; Defined at:
   974 ;;		line 87 in file "application.c"
   975 ;; Parameters:    Size  Location     Type
   976 ;;		None
   977 ;; Auto vars:     Size  Location     Type
   978 ;;		None
   979 ;; Return value:  Size  Location     Type
   980 ;;                  1    wreg      void 
   981 ;; Registers used:
   982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   992 ;;Total ram usage:        0 bytes
   993 ;; Hardware stack levels used:    1
   994 ;; Hardware stack levels required when called:    3
   995 ;; This function calls:
   996 ;;		_dc_motor_rotate_right
   997 ;; This function is called by:
   998 ;;		_main
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           	psect	text5
  1003  00F728                     __ptext5:
  1004                           	callstack 0
  1005  00F728                     _robot_move_forward:
  1006                           	callstack 27
  1007  00F728                     
  1008                           ;application.c: 88:     dc_motor_rotate_right(&motor1);
  1009  00F728  0E40               	movlw	low _motor1
  1010  00F72A  6E30               	movwf	dc_motor_rotate_right@dc_mtor^0,c
  1011  00F72C  0E00               	movlw	high _motor1
  1012  00F72E  6E31               	movwf	(dc_motor_rotate_right@dc_mtor+1)^0,c
  1013  00F730  EC13  F07C         	call	_dc_motor_rotate_right	;wreg free
  1014                           
  1015                           ;application.c: 89:     dc_motor_rotate_right(&motor2);
  1016  00F734  0E3E               	movlw	low _motor2
  1017  00F736  6E30               	movwf	dc_motor_rotate_right@dc_mtor^0,c
  1018  00F738  0E00               	movlw	high _motor2
  1019  00F73A  6E31               	movwf	(dc_motor_rotate_right@dc_mtor+1)^0,c
  1020  00F73C  EC13  F07C         	call	_dc_motor_rotate_right	;wreg free
  1021                           
  1022                           ;application.c: 90:     dc_motor_rotate_right(&motor3);
  1023  00F740  0E3C               	movlw	low _motor3
  1024  00F742  6E30               	movwf	dc_motor_rotate_right@dc_mtor^0,c
  1025  00F744  0E00               	movlw	high _motor3
  1026  00F746  6E31               	movwf	(dc_motor_rotate_right@dc_mtor+1)^0,c
  1027  00F748  EC13  F07C         	call	_dc_motor_rotate_right	;wreg free
  1028                           
  1029                           ;application.c: 91:     dc_motor_rotate_right(&motor4);
  1030  00F74C  0E3A               	movlw	low _motor4
  1031  00F74E  6E30               	movwf	dc_motor_rotate_right@dc_mtor^0,c
  1032  00F750  0E00               	movlw	high _motor4
  1033  00F752  6E31               	movwf	(dc_motor_rotate_right@dc_mtor+1)^0,c
  1034  00F754  EC13  F07C         	call	_dc_motor_rotate_right	;wreg free
  1035  00F758  0012               	return		;funcret
  1036  00F75A                     __end_of_robot_move_forward:
  1037                           	callstack 0
  1038                           
  1039 ;; *************** function _dc_motor_rotate_right *****************
  1040 ;; Defined at:
  1041 ;;		line 23 in file "ecu/dc_motor/ecu_dc motor.c"
  1042 ;; Parameters:    Size  Location     Type
  1043 ;;  dc_mtor         2   13[COMRAM] PTR struct .
  1044 ;;		 -> motor4(2), motor3(2), motor2(2), motor1(2), 
  1045 ;; Auto vars:     Size  Location     Type
  1046 ;;  ret             1    0        enum E13
  1047 ;; Return value:  Size  Location     Type
  1048 ;;                  1    wreg      enum E3006
  1049 ;; Registers used:
  1050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1051 ;; Tracked objects:
  1052 ;;		On entry : 0/0
  1053 ;;		On exit  : 0/0
  1054 ;;		Unchanged: 0/0
  1055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1056 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1057 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1059 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1060 ;;Total ram usage:        3 bytes
  1061 ;; Hardware stack levels used:    1
  1062 ;; Hardware stack levels required when called:    2
  1063 ;; This function calls:
  1064 ;;		_relay_turn_off
  1065 ;;		_relay_turn_on
  1066 ;; This function is called by:
  1067 ;;		_robot_move_forward
  1068 ;;		_robot_move_right
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072                           	psect	text6
  1073  00F826                     __ptext6:
  1074                           	callstack 0
  1075  00F826                     _dc_motor_rotate_right:
  1076                           	callstack 27
  1077  00F826                     
  1078                           ;ecu/dc_motor/ecu_dc motor.c: 25:     if(((void*)0) == dc_mtor){
  1079  00F826  5030               	movf	dc_motor_rotate_right@dc_mtor^0,w,c
  1080  00F828  1031               	iorwf	(dc_motor_rotate_right@dc_mtor+1)^0,w,c
  1081  00F82A  A4D8               	btfss	status,2,c
  1082  00F82C  EF1A  F07C         	goto	u861
  1083  00F830  EF1C  F07C         	goto	u860
  1084  00F834                     u861:
  1085  00F834  EF1E  F07C         	goto	l1598
  1086  00F838                     u860:
  1087  00F838  EF2C  F07C         	goto	l285
  1088  00F83C                     l1598:
  1089                           
  1090                           ;ecu/dc_motor/ecu_dc motor.c: 29:         relay_turn_on(&(dc_mtor->relay1));
  1091  00F83C  C030  F02C         	movff	dc_motor_rotate_right@dc_mtor,relay_turn_on@relay
  1092  00F840  C031  F02D         	movff	dc_motor_rotate_right@dc_mtor+1,relay_turn_on@relay+1
  1093  00F844  EC3B  F07D         	call	_relay_turn_on	;wreg free
  1094                           
  1095                           ;ecu/dc_motor/ecu_dc motor.c: 30:         relay_turn_off(&(dc_mtor->relay2));
  1096  00F848  0E01               	movlw	1
  1097  00F84A  2430               	addwf	dc_motor_rotate_right@dc_mtor^0,w,c
  1098  00F84C  6E2C               	movwf	relay_turn_off@relay^0,c
  1099  00F84E  0E00               	movlw	0
  1100  00F850  2031               	addwfc	(dc_motor_rotate_right@dc_mtor+1)^0,w,c
  1101  00F852  6E2D               	movwf	(relay_turn_off@relay+1)^0,c
  1102  00F854  ECFB  F07C         	call	_relay_turn_off	;wreg free
  1103  00F858                     l285:
  1104  00F858  0012               	return		;funcret
  1105  00F85A                     __end_of_dc_motor_rotate_right:
  1106                           	callstack 0
  1107                           
  1108 ;; *************** function _robot_move_backward *****************
  1109 ;; Defined at:
  1110 ;;		line 93 in file "application.c"
  1111 ;; Parameters:    Size  Location     Type
  1112 ;;		None
  1113 ;; Auto vars:     Size  Location     Type
  1114 ;;		None
  1115 ;; Return value:  Size  Location     Type
  1116 ;;                  1    wreg      void 
  1117 ;; Registers used:
  1118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1119 ;; Tracked objects:
  1120 ;;		On entry : 0/0
  1121 ;;		On exit  : 0/0
  1122 ;;		Unchanged: 0/0
  1123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1128 ;;Total ram usage:        0 bytes
  1129 ;; Hardware stack levels used:    1
  1130 ;; Hardware stack levels required when called:    3
  1131 ;; This function calls:
  1132 ;;		_dc_motor_rotate_left
  1133 ;; This function is called by:
  1134 ;;		_main
  1135 ;; This function uses a non-reentrant model
  1136 ;;
  1137                           
  1138                           	psect	text7
  1139  00F6F6                     __ptext7:
  1140                           	callstack 0
  1141  00F6F6                     _robot_move_backward:
  1142                           	callstack 27
  1143  00F6F6                     
  1144                           ;application.c: 94:     dc_motor_rotate_left(&motor1);
  1145  00F6F6  0E40               	movlw	low _motor1
  1146  00F6F8  6E30               	movwf	dc_motor_rotate_left@dc_mtor^0,c
  1147  00F6FA  0E00               	movlw	high _motor1
  1148  00F6FC  6E31               	movwf	(dc_motor_rotate_left@dc_mtor+1)^0,c
  1149  00F6FE  ECF9  F07B         	call	_dc_motor_rotate_left	;wreg free
  1150                           
  1151                           ;application.c: 95:     dc_motor_rotate_left(&motor2);
  1152  00F702  0E3E               	movlw	low _motor2
  1153  00F704  6E30               	movwf	dc_motor_rotate_left@dc_mtor^0,c
  1154  00F706  0E00               	movlw	high _motor2
  1155  00F708  6E31               	movwf	(dc_motor_rotate_left@dc_mtor+1)^0,c
  1156  00F70A  ECF9  F07B         	call	_dc_motor_rotate_left	;wreg free
  1157                           
  1158                           ;application.c: 96:     dc_motor_rotate_left(&motor3);
  1159  00F70E  0E3C               	movlw	low _motor3
  1160  00F710  6E30               	movwf	dc_motor_rotate_left@dc_mtor^0,c
  1161  00F712  0E00               	movlw	high _motor3
  1162  00F714  6E31               	movwf	(dc_motor_rotate_left@dc_mtor+1)^0,c
  1163  00F716  ECF9  F07B         	call	_dc_motor_rotate_left	;wreg free
  1164                           
  1165                           ;application.c: 97:     dc_motor_rotate_left(&motor4);
  1166  00F71A  0E3A               	movlw	low _motor4
  1167  00F71C  6E30               	movwf	dc_motor_rotate_left@dc_mtor^0,c
  1168  00F71E  0E00               	movlw	high _motor4
  1169  00F720  6E31               	movwf	(dc_motor_rotate_left@dc_mtor+1)^0,c
  1170  00F722  ECF9  F07B         	call	_dc_motor_rotate_left	;wreg free
  1171  00F726  0012               	return		;funcret
  1172  00F728                     __end_of_robot_move_backward:
  1173                           	callstack 0
  1174                           
  1175 ;; *************** function _dc_motor_rotate_left *****************
  1176 ;; Defined at:
  1177 ;;		line 36 in file "ecu/dc_motor/ecu_dc motor.c"
  1178 ;; Parameters:    Size  Location     Type
  1179 ;;  dc_mtor         2   13[COMRAM] PTR struct .
  1180 ;;		 -> motor4(2), motor3(2), motor2(2), motor1(2), 
  1181 ;; Auto vars:     Size  Location     Type
  1182 ;;  ret             1    0        enum E13
  1183 ;; Return value:  Size  Location     Type
  1184 ;;                  1    wreg      enum E3006
  1185 ;; Registers used:
  1186 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1187 ;; Tracked objects:
  1188 ;;		On entry : 0/0
  1189 ;;		On exit  : 0/0
  1190 ;;		Unchanged: 0/0
  1191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1192 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1193 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1195 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1196 ;;Total ram usage:        3 bytes
  1197 ;; Hardware stack levels used:    1
  1198 ;; Hardware stack levels required when called:    2
  1199 ;; This function calls:
  1200 ;;		_relay_turn_off
  1201 ;;		_relay_turn_on
  1202 ;; This function is called by:
  1203 ;;		_robot_move_backward
  1204 ;;		_robot_move_left
  1205 ;; This function uses a non-reentrant model
  1206 ;;
  1207                           
  1208                           	psect	text8
  1209  00F7F2                     __ptext8:
  1210                           	callstack 0
  1211  00F7F2                     _dc_motor_rotate_left:
  1212                           	callstack 27
  1213  00F7F2                     
  1214                           ;ecu/dc_motor/ecu_dc motor.c: 38:     if(((void*)0) == dc_mtor){
  1215  00F7F2  5030               	movf	dc_motor_rotate_left@dc_mtor^0,w,c
  1216  00F7F4  1031               	iorwf	(dc_motor_rotate_left@dc_mtor+1)^0,w,c
  1217  00F7F6  A4D8               	btfss	status,2,c
  1218  00F7F8  EF00  F07C         	goto	u871
  1219  00F7FC  EF02  F07C         	goto	u870
  1220  00F800                     u871:
  1221  00F800  EF04  F07C         	goto	l1612
  1222  00F804                     u870:
  1223  00F804  EF12  F07C         	goto	l290
  1224  00F808                     l1612:
  1225                           
  1226                           ;ecu/dc_motor/ecu_dc motor.c: 42:         relay_turn_off(&(dc_mtor->relay1));
  1227  00F808  C030  F02C         	movff	dc_motor_rotate_left@dc_mtor,relay_turn_off@relay
  1228  00F80C  C031  F02D         	movff	dc_motor_rotate_left@dc_mtor+1,relay_turn_off@relay+1
  1229  00F810  ECFB  F07C         	call	_relay_turn_off	;wreg free
  1230                           
  1231                           ;ecu/dc_motor/ecu_dc motor.c: 43:         relay_turn_on(&(dc_mtor->relay2));
  1232  00F814  0E01               	movlw	1
  1233  00F816  2430               	addwf	dc_motor_rotate_left@dc_mtor^0,w,c
  1234  00F818  6E2C               	movwf	relay_turn_on@relay^0,c
  1235  00F81A  0E00               	movlw	0
  1236  00F81C  2031               	addwfc	(dc_motor_rotate_left@dc_mtor+1)^0,w,c
  1237  00F81E  6E2D               	movwf	(relay_turn_on@relay+1)^0,c
  1238  00F820  EC3B  F07D         	call	_relay_turn_on	;wreg free
  1239  00F824                     l290:
  1240  00F824  0012               	return		;funcret
  1241  00F826                     __end_of_dc_motor_rotate_left:
  1242                           	callstack 0
  1243                           
  1244 ;; *************** function _relay_turn_on *****************
  1245 ;; Defined at:
  1246 ;;		line 24 in file "ecu/Relay/ecu_ralay.c"
  1247 ;; Parameters:    Size  Location     Type
  1248 ;;  relay           2    9[COMRAM] PTR struct .
  1249 ;;		 -> motor4(2), motor3(2), motor2(2), motor1(2), 
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;  ret             1    0        enum E13
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      enum E13
  1254 ;; Registers used:
  1255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1261 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1262 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1263 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1264 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1265 ;;Total ram usage:        4 bytes
  1266 ;; Hardware stack levels used:    1
  1267 ;; Hardware stack levels required when called:    1
  1268 ;; This function calls:
  1269 ;;		_gpio_pin_write_value
  1270 ;; This function is called by:
  1271 ;;		_dc_motor_rotate_right
  1272 ;;		_dc_motor_rotate_left
  1273 ;; This function uses a non-reentrant model
  1274 ;;
  1275                           
  1276                           	psect	text9
  1277  00FA76                     __ptext9:
  1278                           	callstack 0
  1279  00FA76                     _relay_turn_on:
  1280                           	callstack 27
  1281  00FA76                     
  1282                           ;ecu/Relay/ecu_ralay.c: 26:     if((((void*)0) == relay) || (relay->port_name > 5U -1) |
      +                          |
  1283  00FA76  502C               	movf	relay_turn_on@relay^0,w,c
  1284  00FA78  102D               	iorwf	(relay_turn_on@relay+1)^0,w,c
  1285  00FA7A  B4D8               	btfsc	status,2,c
  1286  00FA7C  EF42  F07D         	goto	u771
  1287  00FA80  EF44  F07D         	goto	u770
  1288  00FA84                     u771:
  1289  00FA84  EF7A  F07D         	goto	l262
  1290  00FA88                     u770:
  1291  00FA88  C02C  FFD9         	movff	relay_turn_on@relay,fsr2l
  1292  00FA8C  C02D  FFDA         	movff	relay_turn_on@relay+1,fsr2h
  1293  00FA90  50DF               	movf	indf2,w,c
  1294  00FA92  0B0F               	andlw	15
  1295  00FA94  6E2E               	movwf	??_relay_turn_on^0,c
  1296  00FA96  0E05               	movlw	5
  1297  00FA98  602E               	cpfslt	??_relay_turn_on^0,c
  1298  00FA9A  EF51  F07D         	goto	u781
  1299  00FA9E  EF53  F07D         	goto	u780
  1300  00FAA2                     u781:
  1301  00FAA2  EF7A  F07D         	goto	l262
  1302  00FAA6                     u780:
  1303  00FAA6  C02C  FFD9         	movff	relay_turn_on@relay,fsr2l
  1304  00FAAA  C02D  FFDA         	movff	relay_turn_on@relay+1,fsr2h
  1305  00FAAE  38DF               	swapf	indf2,w,c
  1306  00FAB0  0B07               	andlw	7
  1307  00FAB2  6E2E               	movwf	??_relay_turn_on^0,c
  1308  00FAB4  0E07               	movlw	7
  1309  00FAB6  642E               	cpfsgt	??_relay_turn_on^0,c
  1310  00FAB8  EF60  F07D         	goto	u791
  1311  00FABC  EF62  F07D         	goto	u790
  1312  00FAC0                     u791:
  1313  00FAC0  EF64  F07D         	goto	l1552
  1314  00FAC4                     u790:
  1315  00FAC4  EF7A  F07D         	goto	l262
  1316  00FAC8                     l1552:
  1317                           
  1318                           ;ecu/Relay/ecu_ralay.c: 31:         gpio_pin_write_value(relay->port_name, relay->pin, P
      +                          IN_HIGH);
  1319  00FAC8  C02C  FFD9         	movff	relay_turn_on@relay,fsr2l
  1320  00FACC  C02D  FFDA         	movff	relay_turn_on@relay+1,fsr2h
  1321  00FAD0  38DF               	swapf	indf2,w,c
  1322  00FAD2  0B07               	andlw	7
  1323  00FAD4  6E23               	movwf	gpio_pin_write_value@pin^0,c
  1324  00FAD6  0E01               	movlw	1
  1325  00FAD8  6E24               	movwf	gpio_pin_write_value@logic^0,c
  1326  00FADA  C02C  FFD9         	movff	relay_turn_on@relay,fsr2l
  1327  00FADE  C02D  FFDA         	movff	relay_turn_on@relay+1,fsr2h
  1328  00FAE2  50DF               	movf	indf2,w,c
  1329  00FAE4  0B0F               	andlw	15
  1330  00FAE6  EC7E  F07E         	call	_gpio_pin_write_value
  1331  00FAEA                     
  1332                           ;ecu/Relay/ecu_ralay.c: 32:         relay->relay_status = RELAY_ON;
  1333  00FAEA  C02C  FFD9         	movff	relay_turn_on@relay,fsr2l
  1334  00FAEE  C02D  FFDA         	movff	relay_turn_on@relay+1,fsr2h
  1335  00FAF2  8EDF               	bsf	indf2,7,c
  1336  00FAF4                     l262:
  1337  00FAF4  0012               	return		;funcret
  1338  00FAF6                     __end_of_relay_turn_on:
  1339                           	callstack 0
  1340                           
  1341 ;; *************** function _relay_turn_off *****************
  1342 ;; Defined at:
  1343 ;;		line 38 in file "ecu/Relay/ecu_ralay.c"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;  relay           2    9[COMRAM] PTR struct .
  1346 ;;		 -> motor4(2), motor3(2), motor2(2), motor1(2), 
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;  ret             1    0        enum E13
  1349 ;; Return value:  Size  Location     Type
  1350 ;;                  1    wreg      enum E13
  1351 ;; Registers used:
  1352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1353 ;; Tracked objects:
  1354 ;;		On entry : 0/0
  1355 ;;		On exit  : 0/0
  1356 ;;		Unchanged: 0/0
  1357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1358 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1359 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1360 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1361 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1362 ;;Total ram usage:        4 bytes
  1363 ;; Hardware stack levels used:    1
  1364 ;; Hardware stack levels required when called:    1
  1365 ;; This function calls:
  1366 ;;		_gpio_pin_write_value
  1367 ;; This function is called by:
  1368 ;;		_dc_motor_rotate_right
  1369 ;;		_dc_motor_rotate_left
  1370 ;;		_dc_motor_stop
  1371 ;; This function uses a non-reentrant model
  1372 ;;
  1373                           
  1374                           	psect	text10
  1375  00F9F6                     __ptext10:
  1376                           	callstack 0
  1377  00F9F6                     _relay_turn_off:
  1378                           	callstack 27
  1379  00F9F6                     
  1380                           ;ecu/Relay/ecu_ralay.c: 40:     if((((void*)0) == relay) || (relay->port_name > 5U -1) |
      +                          |
  1381  00F9F6  502C               	movf	relay_turn_off@relay^0,w,c
  1382  00F9F8  102D               	iorwf	(relay_turn_off@relay+1)^0,w,c
  1383  00F9FA  B4D8               	btfsc	status,2,c
  1384  00F9FC  EF02  F07D         	goto	u801
  1385  00FA00  EF04  F07D         	goto	u800
  1386  00FA04                     u801:
  1387  00FA04  EF3A  F07D         	goto	l269
  1388  00FA08                     u800:
  1389  00FA08  C02C  FFD9         	movff	relay_turn_off@relay,fsr2l
  1390  00FA0C  C02D  FFDA         	movff	relay_turn_off@relay+1,fsr2h
  1391  00FA10  50DF               	movf	indf2,w,c
  1392  00FA12  0B0F               	andlw	15
  1393  00FA14  6E2E               	movwf	??_relay_turn_off^0,c
  1394  00FA16  0E05               	movlw	5
  1395  00FA18  602E               	cpfslt	??_relay_turn_off^0,c
  1396  00FA1A  EF11  F07D         	goto	u811
  1397  00FA1E  EF13  F07D         	goto	u810
  1398  00FA22                     u811:
  1399  00FA22  EF3A  F07D         	goto	l269
  1400  00FA26                     u810:
  1401  00FA26  C02C  FFD9         	movff	relay_turn_off@relay,fsr2l
  1402  00FA2A  C02D  FFDA         	movff	relay_turn_off@relay+1,fsr2h
  1403  00FA2E  38DF               	swapf	indf2,w,c
  1404  00FA30  0B07               	andlw	7
  1405  00FA32  6E2E               	movwf	??_relay_turn_off^0,c
  1406  00FA34  0E07               	movlw	7
  1407  00FA36  642E               	cpfsgt	??_relay_turn_off^0,c
  1408  00FA38  EF20  F07D         	goto	u821
  1409  00FA3C  EF22  F07D         	goto	u820
  1410  00FA40                     u821:
  1411  00FA40  EF24  F07D         	goto	l1570
  1412  00FA44                     u820:
  1413  00FA44  EF3A  F07D         	goto	l269
  1414  00FA48                     l1570:
  1415                           
  1416                           ;ecu/Relay/ecu_ralay.c: 45:         gpio_pin_write_value(relay->port_name, relay->pin, P
      +                          IN_LOW);
  1417  00FA48  C02C  FFD9         	movff	relay_turn_off@relay,fsr2l
  1418  00FA4C  C02D  FFDA         	movff	relay_turn_off@relay+1,fsr2h
  1419  00FA50  38DF               	swapf	indf2,w,c
  1420  00FA52  0B07               	andlw	7
  1421  00FA54  6E23               	movwf	gpio_pin_write_value@pin^0,c
  1422  00FA56  0E00               	movlw	0
  1423  00FA58  6E24               	movwf	gpio_pin_write_value@logic^0,c
  1424  00FA5A  C02C  FFD9         	movff	relay_turn_off@relay,fsr2l
  1425  00FA5E  C02D  FFDA         	movff	relay_turn_off@relay+1,fsr2h
  1426  00FA62  50DF               	movf	indf2,w,c
  1427  00FA64  0B0F               	andlw	15
  1428  00FA66  EC7E  F07E         	call	_gpio_pin_write_value
  1429  00FA6A                     
  1430                           ;ecu/Relay/ecu_ralay.c: 46:         relay->relay_status = RELAY_OFF;
  1431  00FA6A  C02C  FFD9         	movff	relay_turn_off@relay,fsr2l
  1432  00FA6E  C02D  FFDA         	movff	relay_turn_off@relay+1,fsr2h
  1433  00FA72  9EDF               	bcf	indf2,7,c
  1434  00FA74                     l269:
  1435  00FA74  0012               	return		;funcret
  1436  00FA76                     __end_of_relay_turn_off:
  1437                           	callstack 0
  1438                           
  1439 ;; *************** function _dc_motor_initialize *****************
  1440 ;; Defined at:
  1441 ;;		line 10 in file "ecu/dc_motor/ecu_dc motor.c"
  1442 ;; Parameters:    Size  Location     Type
  1443 ;;  dc_mtor         2   13[COMRAM] PTR struct .
  1444 ;;		 -> motor4(2), motor3(2), motor2(2), motor1(2), 
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;  ret             1    0        enum E13
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      enum E3006
  1449 ;; Registers used:
  1450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1456 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1457 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1459 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1460 ;;Total ram usage:        3 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    2
  1463 ;; This function calls:
  1464 ;;		_relay_initialize
  1465 ;; This function is called by:
  1466 ;;		_main
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text11
  1471  00F7BE                     __ptext11:
  1472                           	callstack 0
  1473  00F7BE                     _dc_motor_initialize:
  1474                           	callstack 28
  1475  00F7BE                     
  1476                           ;ecu/dc_motor/ecu_dc motor.c: 12:     if(((void*)0) == dc_mtor){
  1477  00F7BE  5030               	movf	dc_motor_initialize@dc_mtor^0,w,c
  1478  00F7C0  1031               	iorwf	(dc_motor_initialize@dc_mtor+1)^0,w,c
  1479  00F7C2  A4D8               	btfss	status,2,c
  1480  00F7C4  EFE6  F07B         	goto	u981
  1481  00F7C8  EFE8  F07B         	goto	u980
  1482  00F7CC                     u981:
  1483  00F7CC  EFEA  F07B         	goto	l1692
  1484  00F7D0                     u980:
  1485  00F7D0  EFF8  F07B         	goto	l280
  1486  00F7D4                     l1692:
  1487                           
  1488                           ;ecu/dc_motor/ecu_dc motor.c: 16:         relay_initialize(&(dc_mtor->relay1));
  1489  00F7D4  C030  F02C         	movff	dc_motor_initialize@dc_mtor,relay_initialize@relay
  1490  00F7D8  C031  F02D         	movff	dc_motor_initialize@dc_mtor+1,relay_initialize@relay+1
  1491  00F7DC  ECC9  F07D         	call	_relay_initialize	;wreg free
  1492                           
  1493                           ;ecu/dc_motor/ecu_dc motor.c: 17:         relay_initialize(&(dc_mtor->relay2));
  1494  00F7E0  0E01               	movlw	1
  1495  00F7E2  2430               	addwf	dc_motor_initialize@dc_mtor^0,w,c
  1496  00F7E4  6E2C               	movwf	relay_initialize@relay^0,c
  1497  00F7E6  0E00               	movlw	0
  1498  00F7E8  2031               	addwfc	(dc_motor_initialize@dc_mtor+1)^0,w,c
  1499  00F7EA  6E2D               	movwf	(relay_initialize@relay+1)^0,c
  1500  00F7EC  ECC9  F07D         	call	_relay_initialize	;wreg free
  1501  00F7F0                     l280:
  1502  00F7F0  0012               	return		;funcret
  1503  00F7F2                     __end_of_dc_motor_initialize:
  1504                           	callstack 0
  1505                           
  1506 ;; *************** function _relay_initialize *****************
  1507 ;; Defined at:
  1508 ;;		line 9 in file "ecu/Relay/ecu_ralay.c"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;  relay           2    9[COMRAM] PTR struct .
  1511 ;;		 -> motor4(2), motor3(2), motor2(2), motor1(2), 
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;  ret             1    0        enum E13
  1514 ;; Return value:  Size  Location     Type
  1515 ;;                  1    wreg      enum E13
  1516 ;; Registers used:
  1517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1518 ;; Tracked objects:
  1519 ;;		On entry : 0/0
  1520 ;;		On exit  : 0/0
  1521 ;;		Unchanged: 0/0
  1522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1523 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1524 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1525 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1526 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1527 ;;Total ram usage:        4 bytes
  1528 ;; Hardware stack levels used:    1
  1529 ;; Hardware stack levels required when called:    1
  1530 ;; This function calls:
  1531 ;;		_gpio_pin_direction_initialize
  1532 ;;		_gpio_pin_write_value
  1533 ;; This function is called by:
  1534 ;;		_dc_motor_initialize
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           	psect	text12
  1539  00FB92                     __ptext12:
  1540                           	callstack 0
  1541  00FB92                     _relay_initialize:
  1542                           	callstack 28
  1543  00FB92                     
  1544                           ;ecu/Relay/ecu_ralay.c: 11:     if((((void*)0) == relay) || (relay->port_name > 5U -1) |
      +                          |
  1545  00FB92  502C               	movf	relay_initialize@relay^0,w,c
  1546  00FB94  102D               	iorwf	(relay_initialize@relay+1)^0,w,c
  1547  00FB96  B4D8               	btfsc	status,2,c
  1548  00FB98  EFD0  F07D         	goto	u891
  1549  00FB9C  EFD2  F07D         	goto	u890
  1550  00FBA0                     u891:
  1551  00FBA0  EF19  F07E         	goto	l255
  1552  00FBA4                     u890:
  1553  00FBA4  C02C  FFD9         	movff	relay_initialize@relay,fsr2l
  1554  00FBA8  C02D  FFDA         	movff	relay_initialize@relay+1,fsr2h
  1555  00FBAC  50DF               	movf	indf2,w,c
  1556  00FBAE  0B0F               	andlw	15
  1557  00FBB0  6E2E               	movwf	??_relay_initialize^0,c
  1558  00FBB2  0E05               	movlw	5
  1559  00FBB4  602E               	cpfslt	??_relay_initialize^0,c
  1560  00FBB6  EFDF  F07D         	goto	u901
  1561  00FBBA  EFE1  F07D         	goto	u900
  1562  00FBBE                     u901:
  1563  00FBBE  EF19  F07E         	goto	l255
  1564  00FBC2                     u900:
  1565  00FBC2  C02C  FFD9         	movff	relay_initialize@relay,fsr2l
  1566  00FBC6  C02D  FFDA         	movff	relay_initialize@relay+1,fsr2h
  1567  00FBCA  38DF               	swapf	indf2,w,c
  1568  00FBCC  0B07               	andlw	7
  1569  00FBCE  6E2E               	movwf	??_relay_initialize^0,c
  1570  00FBD0  0E07               	movlw	7
  1571  00FBD2  642E               	cpfsgt	??_relay_initialize^0,c
  1572  00FBD4  EFEE  F07D         	goto	u911
  1573  00FBD8  EFF0  F07D         	goto	u910
  1574  00FBDC                     u911:
  1575  00FBDC  EFF2  F07D         	goto	l1642
  1576  00FBE0                     u910:
  1577  00FBE0  EF19  F07E         	goto	l255
  1578  00FBE4                     l1642:
  1579                           
  1580                           ;ecu/Relay/ecu_ralay.c: 16:         gpio_pin_direction_initialize(relay->port_name, rela
      +                          y->pin, DIRECTION_OUTPUT);
  1581  00FBE4  C02C  FFD9         	movff	relay_initialize@relay,fsr2l
  1582  00FBE8  C02D  FFDA         	movff	relay_initialize@relay+1,fsr2h
  1583  00FBEC  38DF               	swapf	indf2,w,c
  1584  00FBEE  0B07               	andlw	7
  1585  00FBF0  6E23               	movwf	gpio_pin_direction_initialize@pin^0,c
  1586  00FBF2  0E00               	movlw	0
  1587  00FBF4  6E24               	movwf	gpio_pin_direction_initialize@direction^0,c
  1588  00FBF6  C02C  FFD9         	movff	relay_initialize@relay,fsr2l
  1589  00FBFA  C02D  FFDA         	movff	relay_initialize@relay+1,fsr2h
  1590  00FBFE  50DF               	movf	indf2,w,c
  1591  00FC00  0B0F               	andlw	15
  1592  00FC02  EC1A  F07E         	call	_gpio_pin_direction_initialize
  1593                           
  1594                           ;ecu/Relay/ecu_ralay.c: 17:         gpio_pin_write_value(relay->port_name, relay->pin, P
      +                          IN_LOW);
  1595  00FC06  C02C  FFD9         	movff	relay_initialize@relay,fsr2l
  1596  00FC0A  C02D  FFDA         	movff	relay_initialize@relay+1,fsr2h
  1597  00FC0E  38DF               	swapf	indf2,w,c
  1598  00FC10  0B07               	andlw	7
  1599  00FC12  6E23               	movwf	gpio_pin_write_value@pin^0,c
  1600  00FC14  0E00               	movlw	0
  1601  00FC16  6E24               	movwf	gpio_pin_write_value@logic^0,c
  1602  00FC18  C02C  FFD9         	movff	relay_initialize@relay,fsr2l
  1603  00FC1C  C02D  FFDA         	movff	relay_initialize@relay+1,fsr2h
  1604  00FC20  50DF               	movf	indf2,w,c
  1605  00FC22  0B0F               	andlw	15
  1606  00FC24  EC7E  F07E         	call	_gpio_pin_write_value
  1607  00FC28                     
  1608                           ;ecu/Relay/ecu_ralay.c: 18:         relay->relay_status = RELAY_OFF;
  1609  00FC28  C02C  FFD9         	movff	relay_initialize@relay,fsr2l
  1610  00FC2C  C02D  FFDA         	movff	relay_initialize@relay+1,fsr2h
  1611  00FC30  9EDF               	bcf	indf2,7,c
  1612  00FC32                     l255:
  1613  00FC32  0012               	return		;funcret
  1614  00FC34                     __end_of_relay_initialize:
  1615                           	callstack 0
  1616                           
  1617 ;; *************** function _gpio_pin_write_value *****************
  1618 ;; Defined at:
  1619 ;;		line 88 in file "mcal/gpio/mcal_gpio.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;  port            1    wreg     enum E35
  1622 ;;  pin             1    0[COMRAM] enum E17
  1623 ;;  logic           1    1[COMRAM] enum E31
  1624 ;; Auto vars:     Size  Location     Type
  1625 ;;  port            1    8[COMRAM] enum E35
  1626 ;;  ret             1    0        enum E13
  1627 ;; Return value:  Size  Location     Type
  1628 ;;                  1    wreg      enum E13
  1629 ;; Registers used:
  1630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1631 ;; Tracked objects:
  1632 ;;		On entry : 0/0
  1633 ;;		On exit  : 0/0
  1634 ;;		Unchanged: 0/0
  1635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1636 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1637 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1638 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1639 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1640 ;;Total ram usage:        9 bytes
  1641 ;; Hardware stack levels used:    1
  1642 ;; This function calls:
  1643 ;;		Nothing
  1644 ;; This function is called by:
  1645 ;;		_relay_initialize
  1646 ;;		_relay_turn_on
  1647 ;;		_relay_turn_off
  1648 ;;		_led_initialize
  1649 ;;		_led_turn_on
  1650 ;;		_led_turn_off
  1651 ;; This function uses a non-reentrant model
  1652 ;;
  1653                           
  1654                           	psect	text13
  1655  00FCFC                     __ptext13:
  1656                           	callstack 0
  1657  00FCFC                     _gpio_pin_write_value:
  1658                           	callstack 27
  1659                           
  1660                           ;incstack = 0
  1661                           ;gpio_pin_write_value@port stored from wreg
  1662  00FCFC  6E2B               	movwf	gpio_pin_write_value@port^0,c
  1663  00FCFE                     
  1664                           ;mcal/gpio/mcal_gpio.c: 90: if(pin>8U -1 || pin<0){
  1665  00FCFE  0E08               	movlw	8
  1666  00FD00  6023               	cpfslt	gpio_pin_write_value@pin^0,c
  1667  00FD02  EF85  F07E         	goto	u711
  1668  00FD06  EF87  F07E         	goto	u710
  1669  00FD0A                     u711:
  1670  00FD0A  EFE1  F07E         	goto	l118
  1671  00FD0E                     u710:
  1672  00FD0E  EFCC  F07E         	goto	l1508
  1673  00FD12                     l1502:
  1674                           
  1675                           ;mcal/gpio/mcal_gpio.c: 97:                 (*lat_register[port] &= ~(1U << pin)); break
      +                          ;
  1676  00FD12  C023  F025         	movff	gpio_pin_write_value@pin,??_gpio_pin_write_value
  1677  00FD16  0E01               	movlw	1
  1678  00FD18  6E26               	movwf	(??_gpio_pin_write_value+1)^0,c
  1679  00FD1A  2A25               	incf	??_gpio_pin_write_value^0,f,c
  1680  00FD1C  EF92  F07E         	goto	u724
  1681  00FD20                     u725:
  1682  00FD20  90D8               	bcf	status,0,c
  1683  00FD22  3626               	rlcf	(??_gpio_pin_write_value+1)^0,f,c
  1684  00FD24                     u724:
  1685  00FD24  2E25               	decfsz	??_gpio_pin_write_value^0,f,c
  1686  00FD26  EF90  F07E         	goto	u725
  1687  00FD2A  5026               	movf	(??_gpio_pin_write_value+1)^0,w,c
  1688  00FD2C  0AFF               	xorlw	255
  1689  00FD2E  6E27               	movwf	(??_gpio_pin_write_value+2)^0,c
  1690  00FD30  502B               	movf	gpio_pin_write_value@port^0,w,c
  1691  00FD32  0D02               	mullw	2
  1692  00FD34  0E0B               	movlw	low _lat_register
  1693  00FD36  24F3               	addwf	243,w,c
  1694  00FD38  6ED9               	movwf	fsr2l,c
  1695  00FD3A  0E00               	movlw	high _lat_register
  1696  00FD3C  20F4               	addwfc	prodh,w,c
  1697  00FD3E  6EDA               	movwf	fsr2h,c
  1698  00FD40  CFDE F028          	movff	postinc2,??_gpio_pin_write_value+3
  1699  00FD44  CFDD F029          	movff	postdec2,??_gpio_pin_write_value+4
  1700  00FD48  C028  FFD9         	movff	??_gpio_pin_write_value+3,fsr2l
  1701  00FD4C  C029  FFDA         	movff	??_gpio_pin_write_value+4,fsr2h
  1702  00FD50  5027               	movf	(??_gpio_pin_write_value+2)^0,w,c
  1703  00FD52  16DF               	andwf	indf2,f,c
  1704  00FD54  EFE1  F07E         	goto	l1510
  1705  00FD58                     l1504:
  1706                           
  1707                           ;mcal/gpio/mcal_gpio.c: 100:                 (*lat_register[port] |= (1U << pin)); break
      +                          ;
  1708  00FD58  C023  F025         	movff	gpio_pin_write_value@pin,??_gpio_pin_write_value
  1709  00FD5C  0E01               	movlw	1
  1710  00FD5E  6E26               	movwf	(??_gpio_pin_write_value+1)^0,c
  1711  00FD60  2A25               	incf	??_gpio_pin_write_value^0,f,c
  1712  00FD62  EFB5  F07E         	goto	u734
  1713  00FD66                     u735:
  1714  00FD66  90D8               	bcf	status,0,c
  1715  00FD68  3626               	rlcf	(??_gpio_pin_write_value+1)^0,f,c
  1716  00FD6A                     u734:
  1717  00FD6A  2E25               	decfsz	??_gpio_pin_write_value^0,f,c
  1718  00FD6C  EFB3  F07E         	goto	u735
  1719  00FD70  502B               	movf	gpio_pin_write_value@port^0,w,c
  1720  00FD72  0D02               	mullw	2
  1721  00FD74  0E0B               	movlw	low _lat_register
  1722  00FD76  24F3               	addwf	243,w,c
  1723  00FD78  6ED9               	movwf	fsr2l,c
  1724  00FD7A  0E00               	movlw	high _lat_register
  1725  00FD7C  20F4               	addwfc	prodh,w,c
  1726  00FD7E  6EDA               	movwf	fsr2h,c
  1727  00FD80  CFDE F027          	movff	postinc2,??_gpio_pin_write_value+2
  1728  00FD84  CFDD F028          	movff	postdec2,??_gpio_pin_write_value+3
  1729  00FD88  C027  FFD9         	movff	??_gpio_pin_write_value+2,fsr2l
  1730  00FD8C  C028  FFDA         	movff	??_gpio_pin_write_value+3,fsr2h
  1731  00FD90  5026               	movf	(??_gpio_pin_write_value+1)^0,w,c
  1732  00FD92  12DF               	iorwf	indf2,f,c
  1733  00FD94  EFE1  F07E         	goto	l1510
  1734  00FD98                     l1508:
  1735  00FD98  5024               	movf	gpio_pin_write_value@logic^0,w,c
  1736  00FD9A  6E25               	movwf	??_gpio_pin_write_value^0,c
  1737  00FD9C  6A26               	clrf	(??_gpio_pin_write_value+1)^0,c
  1738                           
  1739                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1740                           ; Switch size 1, requested type "simple"
  1741                           ; Number of cases is 1, Range of values is 0 to 0
  1742                           ; switch strategies available:
  1743                           ; Name         Instructions Cycles
  1744                           ; simple_byte            4     3 (average)
  1745                           ;	Chosen strategy is simple_byte
  1746  00FD9E  5026               	movf	(??_gpio_pin_write_value+1)^0,w,c
  1747  00FDA0  0A00               	xorlw	0	; case 0
  1748  00FDA2  B4D8               	btfsc	status,2,c
  1749  00FDA4  EFD6  F07E         	goto	l1876
  1750  00FDA8  EFE1  F07E         	goto	l118
  1751  00FDAC                     l1876:
  1752                           
  1753                           ; Switch size 1, requested type "simple"
  1754                           ; Number of cases is 2, Range of values is 0 to 1
  1755                           ; switch strategies available:
  1756                           ; Name         Instructions Cycles
  1757                           ; simple_byte            7     4 (average)
  1758                           ;	Chosen strategy is simple_byte
  1759  00FDAC  5025               	movf	??_gpio_pin_write_value^0,w,c
  1760  00FDAE  0A00               	xorlw	0	; case 0
  1761  00FDB0  B4D8               	btfsc	status,2,c
  1762  00FDB2  EF89  F07E         	goto	l1502
  1763  00FDB6  0A01               	xorlw	1	; case 1
  1764  00FDB8  B4D8               	btfsc	status,2,c
  1765  00FDBA  EFAC  F07E         	goto	l1504
  1766  00FDBE  EFE1  F07E         	goto	l118
  1767  00FDC2                     l1510:
  1768  00FDC2                     l118:
  1769  00FDC2  0012               	return		;funcret
  1770  00FDC4                     __end_of_gpio_pin_write_value:
  1771                           	callstack 0
  1772                           
  1773 ;; *************** function _button_initialize *****************
  1774 ;; Defined at:
  1775 ;;		line 14 in file "ecu/button/ecu_button.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;  btn             2    9[COMRAM] PTR struct .
  1778 ;;		 -> btn(4), 
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;  ret             1    0        enum E13
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  1    wreg      enum E13
  1783 ;; Registers used:
  1784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1790 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1791 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;Total ram usage:        4 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; Hardware stack levels required when called:    1
  1797 ;; This function calls:
  1798 ;;		_gpio_pin_direction_initialize
  1799 ;; This function is called by:
  1800 ;;		_main
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text14
  1805  00F980                     __ptext14:
  1806                           	callstack 0
  1807  00F980                     _button_initialize:
  1808                           	callstack 29
  1809  00F980                     
  1810                           ;ecu/button/ecu_button.c: 16:     if((((void*)0) == btn) || (btn->port_name > 5U -1) ||
  1811  00F980  502C               	movf	button_initialize@btn^0,w,c
  1812  00F982  102D               	iorwf	(button_initialize@btn+1)^0,w,c
  1813  00F984  B4D8               	btfsc	status,2,c
  1814  00F986  EFC7  F07C         	goto	u921
  1815  00F98A  EFC9  F07C         	goto	u920
  1816  00F98E                     u921:
  1817  00F98E  EFFA  F07C         	goto	l10
  1818  00F992                     u920:
  1819  00F992  C02C  FFD9         	movff	button_initialize@btn,fsr2l
  1820  00F996  C02D  FFDA         	movff	button_initialize@btn+1,fsr2h
  1821  00F99A  50DF               	movf	indf2,w,c
  1822  00F99C  0B0F               	andlw	15
  1823  00F99E  6E2E               	movwf	??_button_initialize^0,c
  1824  00F9A0  0E05               	movlw	5
  1825  00F9A2  602E               	cpfslt	??_button_initialize^0,c
  1826  00F9A4  EFD6  F07C         	goto	u931
  1827  00F9A8  EFD8  F07C         	goto	u930
  1828  00F9AC                     u931:
  1829  00F9AC  EFFA  F07C         	goto	l10
  1830  00F9B0                     u930:
  1831  00F9B0  C02C  FFD9         	movff	button_initialize@btn,fsr2l
  1832  00F9B4  C02D  FFDA         	movff	button_initialize@btn+1,fsr2h
  1833  00F9B8  38DF               	swapf	indf2,w,c
  1834  00F9BA  0B07               	andlw	7
  1835  00F9BC  6E2E               	movwf	??_button_initialize^0,c
  1836  00F9BE  0E07               	movlw	7
  1837  00F9C0  642E               	cpfsgt	??_button_initialize^0,c
  1838  00F9C2  EFE5  F07C         	goto	u941
  1839  00F9C6  EFE7  F07C         	goto	u940
  1840  00F9CA                     u941:
  1841  00F9CA  EFE9  F07C         	goto	l1660
  1842  00F9CE                     u940:
  1843  00F9CE  EFFA  F07C         	goto	l10
  1844  00F9D2                     l1660:
  1845                           
  1846                           ;ecu/button/ecu_button.c: 21:         gpio_pin_direction_initialize(btn->port_name, btn-
      +                          >pin, DIRECTION_INPUT);
  1847  00F9D2  C02C  FFD9         	movff	button_initialize@btn,fsr2l
  1848  00F9D6  C02D  FFDA         	movff	button_initialize@btn+1,fsr2h
  1849  00F9DA  38DF               	swapf	indf2,w,c
  1850  00F9DC  0B07               	andlw	7
  1851  00F9DE  6E23               	movwf	gpio_pin_direction_initialize@pin^0,c
  1852  00F9E0  0E01               	movlw	1
  1853  00F9E2  6E24               	movwf	gpio_pin_direction_initialize@direction^0,c
  1854  00F9E4  C02C  FFD9         	movff	button_initialize@btn,fsr2l
  1855  00F9E8  C02D  FFDA         	movff	button_initialize@btn+1,fsr2h
  1856  00F9EC  50DF               	movf	indf2,w,c
  1857  00F9EE  0B0F               	andlw	15
  1858  00F9F0  EC1A  F07E         	call	_gpio_pin_direction_initialize
  1859  00F9F4                     l10:
  1860  00F9F4  0012               	return		;funcret
  1861  00F9F6                     __end_of_button_initialize:
  1862                           	callstack 0
  1863                           
  1864 ;; *************** function _gpio_pin_direction_initialize *****************
  1865 ;; Defined at:
  1866 ;;		line 42 in file "mcal/gpio/mcal_gpio.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;  port            1    wreg     enum E35
  1869 ;;  pin             1    0[COMRAM] enum E17
  1870 ;;  direction       1    1[COMRAM] enum E27
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;  port            1    8[COMRAM] enum E35
  1873 ;;  ret             1    0        enum E13
  1874 ;; Return value:  Size  Location     Type
  1875 ;;                  1    wreg      enum E13
  1876 ;; Registers used:
  1877 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1883 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1884 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1887 ;;Total ram usage:        9 bytes
  1888 ;; Hardware stack levels used:    1
  1889 ;; This function calls:
  1890 ;;		Nothing
  1891 ;; This function is called by:
  1892 ;;		_button_initialize
  1893 ;;		_relay_initialize
  1894 ;;		_led_initialize
  1895 ;; This function uses a non-reentrant model
  1896 ;;
  1897                           
  1898                           	psect	text15
  1899  00FC34                     __ptext15:
  1900                           	callstack 0
  1901  00FC34                     _gpio_pin_direction_initialize:
  1902                           	callstack 28
  1903                           
  1904                           ;incstack = 0
  1905                           ;gpio_pin_direction_initialize@port stored from wreg
  1906  00FC34  6E2B               	movwf	gpio_pin_direction_initialize@port^0,c
  1907  00FC36                     
  1908                           ;mcal/gpio/mcal_gpio.c: 44:     if(pin>8U -1 || pin<0){
  1909  00FC36  0E08               	movlw	8
  1910  00FC38  6023               	cpfslt	gpio_pin_direction_initialize@pin^0,c
  1911  00FC3A  EF21  F07E         	goto	u741
  1912  00FC3E  EF23  F07E         	goto	u740
  1913  00FC42                     u741:
  1914  00FC42  EF7D  F07E         	goto	l99
  1915  00FC46                     u740:
  1916  00FC46  EF68  F07E         	goto	l1532
  1917  00FC4A                     l1526:
  1918                           
  1919                           ;mcal/gpio/mcal_gpio.c: 52:                 (*tris_register[port] &= ~(1U << pin)); brea
      +                          k;
  1920  00FC4A  C023  F025         	movff	gpio_pin_direction_initialize@pin,??_gpio_pin_direction_initialize
  1921  00FC4E  0E01               	movlw	1
  1922  00FC50  6E26               	movwf	(??_gpio_pin_direction_initialize+1)^0,c
  1923  00FC52  2A25               	incf	??_gpio_pin_direction_initialize^0,f,c
  1924  00FC54  EF2E  F07E         	goto	u754
  1925  00FC58                     u755:
  1926  00FC58  90D8               	bcf	status,0,c
  1927  00FC5A  3626               	rlcf	(??_gpio_pin_direction_initialize+1)^0,f,c
  1928  00FC5C                     u754:
  1929  00FC5C  2E25               	decfsz	??_gpio_pin_direction_initialize^0,f,c
  1930  00FC5E  EF2C  F07E         	goto	u755
  1931  00FC62  5026               	movf	(??_gpio_pin_direction_initialize+1)^0,w,c
  1932  00FC64  0AFF               	xorlw	255
  1933  00FC66  6E27               	movwf	(??_gpio_pin_direction_initialize+2)^0,c
  1934  00FC68  502B               	movf	gpio_pin_direction_initialize@port^0,w,c
  1935  00FC6A  0D02               	mullw	2
  1936  00FC6C  0E15               	movlw	low _tris_register
  1937  00FC6E  24F3               	addwf	243,w,c
  1938  00FC70  6ED9               	movwf	fsr2l,c
  1939  00FC72  0E00               	movlw	high _tris_register
  1940  00FC74  20F4               	addwfc	prodh,w,c
  1941  00FC76  6EDA               	movwf	fsr2h,c
  1942  00FC78  CFDE F028          	movff	postinc2,??_gpio_pin_direction_initialize+3
  1943  00FC7C  CFDD F029          	movff	postdec2,??_gpio_pin_direction_initialize+4
  1944  00FC80  C028  FFD9         	movff	??_gpio_pin_direction_initialize+3,fsr2l
  1945  00FC84  C029  FFDA         	movff	??_gpio_pin_direction_initialize+4,fsr2h
  1946  00FC88  5027               	movf	(??_gpio_pin_direction_initialize+2)^0,w,c
  1947  00FC8A  16DF               	andwf	indf2,f,c
  1948  00FC8C  EF7D  F07E         	goto	l1534
  1949  00FC90                     l1528:
  1950                           
  1951                           ;mcal/gpio/mcal_gpio.c: 55:                 (*tris_register[port] |= (1U << pin)); break
      +                          ;
  1952  00FC90  C023  F025         	movff	gpio_pin_direction_initialize@pin,??_gpio_pin_direction_initialize
  1953  00FC94  0E01               	movlw	1
  1954  00FC96  6E26               	movwf	(??_gpio_pin_direction_initialize+1)^0,c
  1955  00FC98  2A25               	incf	??_gpio_pin_direction_initialize^0,f,c
  1956  00FC9A  EF51  F07E         	goto	u764
  1957  00FC9E                     u765:
  1958  00FC9E  90D8               	bcf	status,0,c
  1959  00FCA0  3626               	rlcf	(??_gpio_pin_direction_initialize+1)^0,f,c
  1960  00FCA2                     u764:
  1961  00FCA2  2E25               	decfsz	??_gpio_pin_direction_initialize^0,f,c
  1962  00FCA4  EF4F  F07E         	goto	u765
  1963  00FCA8  502B               	movf	gpio_pin_direction_initialize@port^0,w,c
  1964  00FCAA  0D02               	mullw	2
  1965  00FCAC  0E15               	movlw	low _tris_register
  1966  00FCAE  24F3               	addwf	243,w,c
  1967  00FCB0  6ED9               	movwf	fsr2l,c
  1968  00FCB2  0E00               	movlw	high _tris_register
  1969  00FCB4  20F4               	addwfc	prodh,w,c
  1970  00FCB6  6EDA               	movwf	fsr2h,c
  1971  00FCB8  CFDE F027          	movff	postinc2,??_gpio_pin_direction_initialize+2
  1972  00FCBC  CFDD F028          	movff	postdec2,??_gpio_pin_direction_initialize+3
  1973  00FCC0  C027  FFD9         	movff	??_gpio_pin_direction_initialize+2,fsr2l
  1974  00FCC4  C028  FFDA         	movff	??_gpio_pin_direction_initialize+3,fsr2h
  1975  00FCC8  5026               	movf	(??_gpio_pin_direction_initialize+1)^0,w,c
  1976  00FCCA  12DF               	iorwf	indf2,f,c
  1977  00FCCC  EF7D  F07E         	goto	l1534
  1978  00FCD0                     l1532:
  1979  00FCD0  5024               	movf	gpio_pin_direction_initialize@direction^0,w,c
  1980  00FCD2  6E25               	movwf	??_gpio_pin_direction_initialize^0,c
  1981  00FCD4  6A26               	clrf	(??_gpio_pin_direction_initialize+1)^0,c
  1982                           
  1983                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1984                           ; Switch size 1, requested type "simple"
  1985                           ; Number of cases is 1, Range of values is 0 to 0
  1986                           ; switch strategies available:
  1987                           ; Name         Instructions Cycles
  1988                           ; simple_byte            4     3 (average)
  1989                           ;	Chosen strategy is simple_byte
  1990  00FCD6  5026               	movf	(??_gpio_pin_direction_initialize+1)^0,w,c
  1991  00FCD8  0A00               	xorlw	0	; case 0
  1992  00FCDA  B4D8               	btfsc	status,2,c
  1993  00FCDC  EF72  F07E         	goto	l1878
  1994  00FCE0  EF7D  F07E         	goto	l99
  1995  00FCE4                     l1878:
  1996                           
  1997                           ; Switch size 1, requested type "simple"
  1998                           ; Number of cases is 2, Range of values is 0 to 1
  1999                           ; switch strategies available:
  2000                           ; Name         Instructions Cycles
  2001                           ; simple_byte            7     4 (average)
  2002                           ;	Chosen strategy is simple_byte
  2003  00FCE4  5025               	movf	??_gpio_pin_direction_initialize^0,w,c
  2004  00FCE6  0A00               	xorlw	0	; case 0
  2005  00FCE8  B4D8               	btfsc	status,2,c
  2006  00FCEA  EF25  F07E         	goto	l1526
  2007  00FCEE  0A01               	xorlw	1	; case 1
  2008  00FCF0  B4D8               	btfsc	status,2,c
  2009  00FCF2  EF48  F07E         	goto	l1528
  2010  00FCF6  EF7D  F07E         	goto	l99
  2011  00FCFA                     l1534:
  2012  00FCFA                     l99:
  2013  00FCFA  0012               	return		;funcret
  2014  00FCFC                     __end_of_gpio_pin_direction_initialize:
  2015                           	callstack 0
  2016                           
  2017 ;; *************** function _button_get_status *****************
  2018 ;; Defined at:
  2019 ;;		line 32 in file "ecu/button/ecu_button.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;  btn             2    9[COMRAM] PTR struct .
  2022 ;;		 -> btn(4), 
  2023 ;;  btn_status      2   11[COMRAM] PTR enum E77
  2024 ;;		 -> btn_status(4), 
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;  ret             1    0        enum E13
  2027 ;; Return value:  Size  Location     Type
  2028 ;;                  1    wreg      enum E13
  2029 ;; Registers used:
  2030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2031 ;; Tracked objects:
  2032 ;;		On entry : 0/0
  2033 ;;		On exit  : 0/0
  2034 ;;		Unchanged: 0/0
  2035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2036 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2037 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2038 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2039 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2040 ;;Total ram usage:        6 bytes
  2041 ;; Hardware stack levels used:    1
  2042 ;; Hardware stack levels required when called:    1
  2043 ;; This function calls:
  2044 ;;		_gpio_pin_read_status
  2045 ;; This function is called by:
  2046 ;;		_main
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           	psect	text16
  2051  00FAF6                     __ptext16:
  2052                           	callstack 0
  2053  00FAF6                     _button_get_status:
  2054                           	callstack 29
  2055  00FAF6                     
  2056                           ;ecu/button/ecu_button.c: 34:     if((((void*)0) == btn) || (btn->port_name > 5U -1) ||
  2057  00FAF6  502C               	movf	button_get_status@btn^0,w,c
  2058  00FAF8  102D               	iorwf	(button_get_status@btn+1)^0,w,c
  2059  00FAFA  B4D8               	btfsc	status,2,c
  2060  00FAFC  EF82  F07D         	goto	u951
  2061  00FB00  EF84  F07D         	goto	u950
  2062  00FB04                     u951:
  2063  00FB04  EFC8  F07D         	goto	l17
  2064  00FB08                     u950:
  2065  00FB08  C02C  FFD9         	movff	button_get_status@btn,fsr2l
  2066  00FB0C  C02D  FFDA         	movff	button_get_status@btn+1,fsr2h
  2067  00FB10  50DF               	movf	indf2,w,c
  2068  00FB12  0B0F               	andlw	15
  2069  00FB14  6E30               	movwf	??_button_get_status^0,c
  2070  00FB16  0E05               	movlw	5
  2071  00FB18  6030               	cpfslt	??_button_get_status^0,c
  2072  00FB1A  EF91  F07D         	goto	u961
  2073  00FB1E  EF93  F07D         	goto	u960
  2074  00FB22                     u961:
  2075  00FB22  EFC8  F07D         	goto	l17
  2076  00FB26                     u960:
  2077  00FB26  C02C  FFD9         	movff	button_get_status@btn,fsr2l
  2078  00FB2A  C02D  FFDA         	movff	button_get_status@btn+1,fsr2h
  2079  00FB2E  38DF               	swapf	indf2,w,c
  2080  00FB30  0B07               	andlw	7
  2081  00FB32  6E30               	movwf	??_button_get_status^0,c
  2082  00FB34  0E07               	movlw	7
  2083  00FB36  6430               	cpfsgt	??_button_get_status^0,c
  2084  00FB38  EFA0  F07D         	goto	u971
  2085  00FB3C  EFA2  F07D         	goto	u970
  2086  00FB40                     u971:
  2087  00FB40  EFA4  F07D         	goto	l1676
  2088  00FB44                     u970:
  2089  00FB44  EFC8  F07D         	goto	l17
  2090  00FB48                     l1676:
  2091                           
  2092                           ;ecu/button/ecu_button.c: 39:         gpio_pin_read_status(btn->port_name, btn->pin, btn
      +                          _status);
  2093  00FB48  C02C  FFD9         	movff	button_get_status@btn,fsr2l
  2094  00FB4C  C02D  FFDA         	movff	button_get_status@btn+1,fsr2h
  2095  00FB50  38DF               	swapf	indf2,w,c
  2096  00FB52  0B07               	andlw	7
  2097  00FB54  6E23               	movwf	gpio_pin_read_status@pin^0,c
  2098  00FB56  C02E  F024         	movff	button_get_status@btn_status,gpio_pin_read_status@logic
  2099  00FB5A  C02F  F025         	movff	button_get_status@btn_status+1,gpio_pin_read_status@logic+1
  2100  00FB5E  C02C  FFD9         	movff	button_get_status@btn,fsr2l
  2101  00FB62  C02D  FFDA         	movff	button_get_status@btn+1,fsr2h
  2102  00FB66  50DF               	movf	indf2,w,c
  2103  00FB68  0B0F               	andlw	15
  2104  00FB6A  EC88  F07C         	call	_gpio_pin_read_status
  2105  00FB6E                     
  2106                           ;ecu/button/ecu_button.c: 40:         btn->button_status = *btn_status;
  2107  00FB6E  C02E  FFD9         	movff	button_get_status@btn_status,fsr2l
  2108  00FB72  C02F  FFDA         	movff	button_get_status@btn_status+1,fsr2h
  2109  00FB76  50DF               	movf	indf2,w,c
  2110  00FB78  6E30               	movwf	??_button_get_status^0,c
  2111  00FB7A  C02C  FFD9         	movff	button_get_status@btn,fsr2l
  2112  00FB7E  C02D  FFDA         	movff	button_get_status@btn+1,fsr2h
  2113  00FB82  3230               	rrcf	??_button_get_status^0,f,c
  2114  00FB84  3230               	rrcf	??_button_get_status^0,f,c
  2115  00FB86  50DF               	movf	indf2,w,c
  2116  00FB88  1830               	xorwf	??_button_get_status^0,w,c
  2117  00FB8A  0B7F               	andlw	-129
  2118  00FB8C  1830               	xorwf	??_button_get_status^0,w,c
  2119  00FB8E  6EDF               	movwf	indf2,c
  2120  00FB90                     l17:
  2121  00FB90  0012               	return		;funcret
  2122  00FB92                     __end_of_button_get_status:
  2123                           	callstack 0
  2124                           
  2125 ;; *************** function _gpio_pin_read_status *****************
  2126 ;; Defined at:
  2127 ;;		line 114 in file "mcal/gpio/mcal_gpio.c"
  2128 ;; Parameters:    Size  Location     Type
  2129 ;;  port            1    wreg     enum E35
  2130 ;;  pin             1    0[COMRAM] enum E17
  2131 ;;  logic           2    1[COMRAM] PTR enum E31
  2132 ;;		 -> btn_status(4), 
  2133 ;; Auto vars:     Size  Location     Type
  2134 ;;  port            1    8[COMRAM] enum E35
  2135 ;;  ret             1    0        enum E13
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  1    wreg      enum E13
  2138 ;; Registers used:
  2139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2145 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2146 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2147 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2148 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2149 ;;Total ram usage:        9 bytes
  2150 ;; Hardware stack levels used:    1
  2151 ;; This function calls:
  2152 ;;		Nothing
  2153 ;; This function is called by:
  2154 ;;		_button_get_status
  2155 ;; This function uses a non-reentrant model
  2156 ;;
  2157                           
  2158                           	psect	text17
  2159  00F910                     __ptext17:
  2160                           	callstack 0
  2161  00F910                     _gpio_pin_read_status:
  2162                           	callstack 29
  2163                           
  2164                           ;incstack = 0
  2165                           ;gpio_pin_read_status@port stored from wreg
  2166  00F910  6E2B               	movwf	gpio_pin_read_status@port^0,c
  2167  00F912                     
  2168                           ;mcal/gpio/mcal_gpio.c: 115:  ret_status ret;;mcal/gpio/mcal_gpio.c: 116:     if(pin > 8
      +                          U -1 || ((void*)0) == logic){
  2169  00F912  0E08               	movlw	8
  2170  00F914  6023               	cpfslt	gpio_pin_read_status@pin^0,c
  2171  00F916  EF8F  F07C         	goto	u831
  2172  00F91A  EF91  F07C         	goto	u830
  2173  00F91E                     u831:
  2174  00F91E  EFBF  F07C         	goto	l130
  2175  00F922                     u830:
  2176  00F922  5024               	movf	gpio_pin_read_status@logic^0,w,c
  2177  00F924  1025               	iorwf	(gpio_pin_read_status@logic+1)^0,w,c
  2178  00F926  A4D8               	btfss	status,2,c
  2179  00F928  EF98  F07C         	goto	u841
  2180  00F92C  EF9A  F07C         	goto	u840
  2181  00F930                     u841:
  2182  00F930  EF9C  F07C         	goto	l1584
  2183  00F934                     u840:
  2184  00F934  EFBF  F07C         	goto	l130
  2185  00F938                     l1584:
  2186                           
  2187                           ;mcal/gpio/mcal_gpio.c: 121:         *logic = ((*port_register[port] >> pin) & 1U);
  2188  00F938  C023  F026         	movff	gpio_pin_read_status@pin,??_gpio_pin_read_status
  2189  00F93C  502B               	movf	gpio_pin_read_status@port^0,w,c
  2190  00F93E  0D02               	mullw	2
  2191  00F940  0E01               	movlw	low _port_register
  2192  00F942  24F3               	addwf	243,w,c
  2193  00F944  6ED9               	movwf	fsr2l,c
  2194  00F946  0E00               	movlw	high _port_register
  2195  00F948  20F4               	addwfc	prodh,w,c
  2196  00F94A  6EDA               	movwf	fsr2h,c
  2197  00F94C  CFDE F027          	movff	postinc2,??_gpio_pin_read_status+1
  2198  00F950  CFDD F028          	movff	postdec2,??_gpio_pin_read_status+2
  2199  00F954  C027  FFD9         	movff	??_gpio_pin_read_status+1,fsr2l
  2200  00F958  C028  FFDA         	movff	??_gpio_pin_read_status+2,fsr2h
  2201  00F95C  50DF               	movf	indf2,w,c
  2202  00F95E  6E29               	movwf	(??_gpio_pin_read_status+3)^0,c
  2203  00F960  2A26               	incf	??_gpio_pin_read_status^0,f,c
  2204  00F962  EFB5  F07C         	goto	u854
  2205  00F966                     u855:
  2206  00F966  90D8               	bcf	status,0,c
  2207  00F968  3229               	rrcf	(??_gpio_pin_read_status+3)^0,f,c
  2208  00F96A                     u854:
  2209  00F96A  2E26               	decfsz	??_gpio_pin_read_status^0,f,c
  2210  00F96C  EFB3  F07C         	goto	u855
  2211  00F970  5029               	movf	(??_gpio_pin_read_status+3)^0,w,c
  2212  00F972  0B01               	andlw	1
  2213  00F974  C024  FFD9         	movff	gpio_pin_read_status@logic,fsr2l
  2214  00F978  C025  FFDA         	movff	gpio_pin_read_status@logic+1,fsr2h
  2215  00F97C  6EDF               	movwf	indf2,c
  2216  00F97E                     l130:
  2217  00F97E  0012               	return		;funcret
  2218  00F980                     __end_of_gpio_pin_read_status:
  2219                           	callstack 0
  2220  0000                     
  2221                           	psect	rparam
  2222  0000                     
  2223                           	psect	idloc
  2224                           
  2225                           ;Config register IDLOC0 @ 0x200000
  2226                           ;	unspecified, using default values
  2227  200000                     	org	2097152
  2228  200000  FF                 	db	255
  2229                           
  2230                           ;Config register IDLOC1 @ 0x200001
  2231                           ;	unspecified, using default values
  2232  200001                     	org	2097153
  2233  200001  FF                 	db	255
  2234                           
  2235                           ;Config register IDLOC2 @ 0x200002
  2236                           ;	unspecified, using default values
  2237  200002                     	org	2097154
  2238  200002  FF                 	db	255
  2239                           
  2240                           ;Config register IDLOC3 @ 0x200003
  2241                           ;	unspecified, using default values
  2242  200003                     	org	2097155
  2243  200003  FF                 	db	255
  2244                           
  2245                           ;Config register IDLOC4 @ 0x200004
  2246                           ;	unspecified, using default values
  2247  200004                     	org	2097156
  2248  200004  FF                 	db	255
  2249                           
  2250                           ;Config register IDLOC5 @ 0x200005
  2251                           ;	unspecified, using default values
  2252  200005                     	org	2097157
  2253  200005  FF                 	db	255
  2254                           
  2255                           ;Config register IDLOC6 @ 0x200006
  2256                           ;	unspecified, using default values
  2257  200006                     	org	2097158
  2258  200006  FF                 	db	255
  2259                           
  2260                           ;Config register IDLOC7 @ 0x200007
  2261                           ;	unspecified, using default values
  2262  200007                     	org	2097159
  2263  200007  FF                 	db	255
  2264                           
  2265                           	psect	config
  2266                           
  2267                           ; Padding undefined space
  2268  300000                     	org	3145728
  2269  300000  FF                 	db	255
  2270                           
  2271                           ;Config register CONFIG1H @ 0x300001
  2272                           ;	unspecified, using default values
  2273                           ;	Oscillator Selection bits
  2274                           ;	FOSC = 0x7, unprogrammed default
  2275                           ;	Fail-Safe Clock Monitor Enable bit
  2276                           ;	FCMEN = 0x0, unprogrammed default
  2277                           ;	Internal/External Oscillator Switchover bit
  2278                           ;	IESO = 0x0, unprogrammed default
  2279  300001                     	org	3145729
  2280  300001  07                 	db	7
  2281                           
  2282                           ;Config register CONFIG2L @ 0x300002
  2283                           ;	unspecified, using default values
  2284                           ;	Power-up Timer Enable bit
  2285                           ;	PWRT = 0x1, unprogrammed default
  2286                           ;	Brown-out Reset Enable bits
  2287                           ;	BOREN = 0x3, unprogrammed default
  2288                           ;	Brown Out Reset Voltage bits
  2289                           ;	BORV = 0x3, unprogrammed default
  2290  300002                     	org	3145730
  2291  300002  1F                 	db	31
  2292                           
  2293                           ;Config register CONFIG2H @ 0x300003
  2294                           ;	unspecified, using default values
  2295                           ;	Watchdog Timer Enable bit
  2296                           ;	WDTEN = 0x1, unprogrammed default
  2297                           ;	Watchdog Timer Postscale Select bits
  2298                           ;	WDTPS = 0xF, unprogrammed default
  2299  300003                     	org	3145731
  2300  300003  1F                 	db	31
  2301                           
  2302                           ; Padding undefined space
  2303  300004                     	org	3145732
  2304  300004  FF                 	db	255
  2305                           
  2306                           ;Config register CONFIG3H @ 0x300005
  2307                           ;	unspecified, using default values
  2308                           ;	CCP2 MUX bit
  2309                           ;	CCP2MX = 0x1, unprogrammed default
  2310                           ;	PORTB A/D Enable bit
  2311                           ;	PBADEN = 0x1, unprogrammed default
  2312                           ;	Low-Power Timer1 Oscillator Enable bit
  2313                           ;	LPT1OSC = 0x0, unprogrammed default
  2314                           ;	HFINTOSC Fast Start-up
  2315                           ;	HFOFST = 0x1, unprogrammed default
  2316                           ;	MCLR Pin Enable bit
  2317                           ;	MCLRE = 0x1, unprogrammed default
  2318  300005                     	org	3145733
  2319  300005  8B                 	db	139
  2320                           
  2321                           ;Config register CONFIG4L @ 0x300006
  2322                           ;	Stack Full/Underflow Reset Enable bit
  2323                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2324                           ;	Single-Supply ICSP Enable bit
  2325                           ;	LVP = ON, Single-Supply ICSP enabled
  2326                           ;	Extended Instruction Set Enable bit
  2327                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2328                           ;	Background Debugger Enable bit
  2329                           ;	DEBUG = 0x1, unprogrammed default
  2330  300006                     	org	3145734
  2331  300006  85                 	db	133
  2332                           
  2333                           ; Padding undefined space
  2334  300007                     	org	3145735
  2335  300007  FF                 	db	255
  2336                           
  2337                           ;Config register CONFIG5L @ 0x300008
  2338                           ;	Code Protection Block 0
  2339                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  2340                           ;	Code Protection Block 1
  2341                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  2342                           ;	Code Protection Block 2
  2343                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  2344                           ;	Code Protection Block 3
  2345                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  2346  300008                     	org	3145736
  2347  300008  0F                 	db	15
  2348                           
  2349                           ;Config register CONFIG5H @ 0x300009
  2350                           ;	Boot Block Code Protection bit
  2351                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  2352                           ;	Data EEPROM Code Protection bit
  2353                           ;	CPD = OFF, Data EEPROM not code-protected
  2354  300009                     	org	3145737
  2355  300009  C0                 	db	192
  2356                           
  2357                           ;Config register CONFIG6L @ 0x30000A
  2358                           ;	Write Protection Block 0
  2359                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  2360                           ;	Write Protection Block 1
  2361                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  2362                           ;	Write Protection Block 2
  2363                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  2364                           ;	Write Protection Block 3
  2365                           ;	WRT3 = OFF, Block 3 (00C000h-00FFFFh) not write-protected
  2366  30000A                     	org	3145738
  2367  30000A  0F                 	db	15
  2368                           
  2369                           ;Config register CONFIG6H @ 0x30000B
  2370                           ;	Configuration Register Write Protection bit
  2371                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2372                           ;	Boot Block Write Protection bit
  2373                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  2374                           ;	Data EEPROM Write Protection bit
  2375                           ;	WRTD = OFF, Data EEPROM not write-protected
  2376  30000B                     	org	3145739
  2377  30000B  E0                 	db	224
  2378                           
  2379                           ;Config register CONFIG7L @ 0x30000C
  2380                           ;	Table Read Protection Block 0
  2381                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  2382                           ;	Table Read Protection Block 1
  2383                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  2384                           ;	Table Read Protection Block 2
  2385                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  2386                           ;	Table Read Protection Block 3
  2387                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  2388  30000C                     	org	3145740
  2389  30000C  0F                 	db	15
  2390                           
  2391                           ;Config register CONFIG7H @ 0x30000D
  2392                           ;	Boot Block Table Read Protection bit
  2393                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  2394  30000D                     	org	3145741
  2395  30000D  40                 	db	64
  2396                           tosu	equ	0xFFF
  2397                           tosh	equ	0xFFE
  2398                           tosl	equ	0xFFD
  2399                           stkptr	equ	0xFFC
  2400                           pclatu	equ	0xFFB
  2401                           pclath	equ	0xFFA
  2402                           pcl	equ	0xFF9
  2403                           tblptru	equ	0xFF8
  2404                           tblptrh	equ	0xFF7
  2405                           tblptrl	equ	0xFF6
  2406                           tablat	equ	0xFF5
  2407                           prodh	equ	0xFF4
  2408                           prodl	equ	0xFF3
  2409                           indf0	equ	0xFEF
  2410                           postinc0	equ	0xFEE
  2411                           postdec0	equ	0xFED
  2412                           preinc0	equ	0xFEC
  2413                           plusw0	equ	0xFEB
  2414                           fsr0h	equ	0xFEA
  2415                           fsr0l	equ	0xFE9
  2416                           wreg	equ	0xFE8
  2417                           indf1	equ	0xFE7
  2418                           postinc1	equ	0xFE6
  2419                           postdec1	equ	0xFE5
  2420                           preinc1	equ	0xFE4
  2421                           plusw1	equ	0xFE3
  2422                           fsr1h	equ	0xFE2
  2423                           fsr1l	equ	0xFE1
  2424                           bsr	equ	0xFE0
  2425                           indf2	equ	0xFDF
  2426                           postinc2	equ	0xFDE
  2427                           postdec2	equ	0xFDD
  2428                           preinc2	equ	0xFDC
  2429                           plusw2	equ	0xFDB
  2430                           fsr2h	equ	0xFDA
  2431                           fsr2l	equ	0xFD9
  2432                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        34
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     18      65
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    dc_motor_stop@dc_mtor	PTR struct . size(2) Largest target is 2
		 -> motor4(COMRAM[2]), motor3(COMRAM[2]), motor2(COMRAM[2]), motor1(COMRAM[2]), 

    dc_motor_rotate_left@dc_mtor	PTR struct . size(2) Largest target is 2
		 -> motor4(COMRAM[2]), motor3(COMRAM[2]), motor2(COMRAM[2]), motor1(COMRAM[2]), 

    dc_motor_rotate_right@dc_mtor	PTR struct . size(2) Largest target is 2
		 -> motor4(COMRAM[2]), motor3(COMRAM[2]), motor2(COMRAM[2]), motor1(COMRAM[2]), 

    dc_motor_initialize@dc_mtor	PTR struct . size(2) Largest target is 2
		 -> motor4(COMRAM[2]), motor3(COMRAM[2]), motor2(COMRAM[2]), motor1(COMRAM[2]), 

    relay_turn_off@relay	PTR struct . size(2) Largest target is 2
		 -> motor4(COMRAM[2]), motor3(COMRAM[2]), motor2(COMRAM[2]), motor1(COMRAM[2]), 

    relay_turn_on@relay	PTR struct . size(2) Largest target is 2
		 -> motor4(COMRAM[2]), motor3(COMRAM[2]), motor2(COMRAM[2]), motor1(COMRAM[2]), 

    relay_initialize@relay	PTR struct . size(2) Largest target is 2
		 -> motor4(COMRAM[2]), motor3(COMRAM[2]), motor2(COMRAM[2]), motor1(COMRAM[2]), 

    gpio_pin_read_status@logic	PTR enum E31 size(2) Largest target is 4
		 -> btn_status(COMRAM[4]), 

    port_register	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> PORTE(SFR[1]), PORTD(SFR[1]), PORTC(SFR[1]), PORTB(SFR[1]), 
		 -> PORTA(SFR[1]), 

    lat_register	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> LATE(SFR[1]), LATD(SFR[1]), LATC(SFR[1]), LATB(SFR[1]), 
		 -> LATA(SFR[1]), 

    tris_register	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> TRISE(SFR[1]), TRISD(SFR[1]), TRISC(SFR[1]), TRISB(SFR[1]), 
		 -> TRISA(SFR[1]), 

    button_get_status@btn_status	PTR enum E77 size(2) Largest target is 4
		 -> btn_status(COMRAM[4]), 

    button_get_status@btn	PTR struct . size(2) Largest target is 4
		 -> btn(COMRAM[4]), 

    button_initialize@btn	PTR struct . size(2) Largest target is 4
		 -> btn(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_robot_stop
    _robot_stop->_dc_motor_stop
    _robot_move_right->_dc_motor_rotate_right
    _robot_move_right->_dc_motor_stop
    _robot_move_left->_dc_motor_rotate_left
    _robot_move_left->_dc_motor_stop
    _dc_motor_stop->_relay_turn_off
    _robot_move_forward->_dc_motor_rotate_right
    _dc_motor_rotate_right->_relay_turn_off
    _dc_motor_rotate_right->_relay_turn_on
    _robot_move_backward->_dc_motor_rotate_left
    _dc_motor_rotate_left->_relay_turn_off
    _dc_motor_rotate_left->_relay_turn_on
    _relay_turn_on->_gpio_pin_write_value
    _relay_turn_off->_gpio_pin_write_value
    _dc_motor_initialize->_relay_initialize
    _relay_initialize->_gpio_pin_direction_initialize
    _relay_initialize->_gpio_pin_write_value
    _button_initialize->_gpio_pin_direction_initialize
    _button_get_status->_gpio_pin_read_status

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   23987
                  _button_get_status
                  _button_initialize
                _dc_motor_initialize
                _robot_move_backward
                 _robot_move_forward
                    _robot_move_left
                   _robot_move_right
                         _robot_stop
 ---------------------------------------------------------------------------------
 (1) _robot_stop                                           2     2      0    2196
                                             16 COMRAM     2     2      0
                      _dc_motor_stop
 ---------------------------------------------------------------------------------
 (1) _robot_move_right                                     0     0      0    5596
              _dc_motor_rotate_right
                      _dc_motor_stop
 ---------------------------------------------------------------------------------
 (1) _robot_move_left                                      0     0      0    5596
               _dc_motor_rotate_left
                      _dc_motor_stop
 ---------------------------------------------------------------------------------
 (2) _dc_motor_stop                                        3     1      2    2196
                                             13 COMRAM     3     1      2
                     _relay_turn_off
 ---------------------------------------------------------------------------------
 (1) _robot_move_forward                                   0     0      0    3400
              _dc_motor_rotate_right
 ---------------------------------------------------------------------------------
 (2) _dc_motor_rotate_right                                3     1      2    3400
                                             13 COMRAM     3     1      2
                     _relay_turn_off
                      _relay_turn_on
 ---------------------------------------------------------------------------------
 (1) _robot_move_backward                                  0     0      0    3400
               _dc_motor_rotate_left
 ---------------------------------------------------------------------------------
 (2) _dc_motor_rotate_left                                 3     1      2    3400
                                             13 COMRAM     3     1      2
                     _relay_turn_off
                      _relay_turn_on
 ---------------------------------------------------------------------------------
 (3) _relay_turn_on                                        4     2      2    1356
                                              9 COMRAM     4     2      2
               _gpio_pin_write_value
 ---------------------------------------------------------------------------------
 (3) _relay_turn_off                                       4     2      2    1508
                                              9 COMRAM     4     2      2
               _gpio_pin_write_value
 ---------------------------------------------------------------------------------
 (1) _dc_motor_initialize                                  3     1      2    2386
                                             13 COMRAM     3     1      2
                   _relay_initialize
 ---------------------------------------------------------------------------------
 (2) _relay_initialize                                     4     2      2    2002
                                              9 COMRAM     4     2      2
      _gpio_pin_direction_initialize
               _gpio_pin_write_value
 ---------------------------------------------------------------------------------
 (4) _gpio_pin_write_value                                 9     7      2    1058
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (1) _button_initialize                                    4     2      2     802
                                              9 COMRAM     4     2      2
      _gpio_pin_direction_initialize
 ---------------------------------------------------------------------------------
 (3) _gpio_pin_direction_initialize                        9     7      2     602
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (1) _button_get_status                                    6     2      4     611
                                              9 COMRAM     6     2      4
               _gpio_pin_read_status
 ---------------------------------------------------------------------------------
 (2) _gpio_pin_read_status                                 9     6      3     269
                                              0 COMRAM     9     6      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _button_get_status
     _gpio_pin_read_status
   _button_initialize
     _gpio_pin_direction_initialize
   _dc_motor_initialize
     _relay_initialize
       _gpio_pin_direction_initialize
       _gpio_pin_write_value
   _robot_move_backward
     _dc_motor_rotate_left
       _relay_turn_off
         _gpio_pin_write_value
       _relay_turn_on
         _gpio_pin_write_value
   _robot_move_forward
     _dc_motor_rotate_right
       _relay_turn_off
         _gpio_pin_write_value
       _relay_turn_on
         _gpio_pin_write_value
   _robot_move_left
     _dc_motor_rotate_left
       _relay_turn_off
         _gpio_pin_write_value
       _relay_turn_on
         _gpio_pin_write_value
     _dc_motor_stop
       _relay_turn_off
         _gpio_pin_write_value
   _robot_move_right
     _dc_motor_rotate_right
       _relay_turn_off
         _gpio_pin_write_value
       _relay_turn_on
         _gpio_pin_write_value
     _dc_motor_stop
       _relay_turn_off
         _gpio_pin_write_value
   _robot_stop
     _dc_motor_stop
       _relay_turn_off
         _gpio_pin_write_value

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     12      41       1       68.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      41      32        0.0%
DATA                 0      0      41       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Sat Nov 07 17:34:02 2020

                                     _i 0035                  ??_gpio_pin_read_status 0026  
                                    l10 F9F4                                      l17 FB90  
                                    l99 FCFA                 __size_of_relay_turn_off 0080  
                                   l130 F97E                                     l118 FDC2  
                                   l233 F758                                     l242 F78A  
                                   l236 F726                                     l245 F90E  
                                   l262 FAF4                                     l255 FC32  
                                   l239 F7BC                                     l280 F7F0  
                                   l290 F824                                     l269 FA74  
                                   l285 F858                                     l295 F88C  
          dc_motor_rotate_right@dc_mtor 0030                                     u710 FD0E  
                                   u711 FD0A                                     u800 FA08  
                                   u801 FA04                                     u810 FA26  
                                   u811 FA22                                     u740 FC46  
                                   u724 FD24                                     u900 FBC2  
                                   u820 FA44                                     u741 FC42  
                                   u725 FD20                                     u901 FBBE  
                                   u821 FA40                                     u830 F922  
                                   u734 FD6A                                     u910 FBE0  
                                   u831 F91E                                     u735 FD66  
                                   u911 FBDC                                     u840 F934  
                                   u920 F992                                     u841 F930  
                                   u921 F98E                                     u754 FC5C  
                                   u930 F9B0                                     u770 FA88  
                                   u755 FC58                                     u931 F9AC  
                                   u771 FA84                                     u764 FCA2  
                                   u940 F9CE                                     u780 FAA6  
                                   u860 F838                                     u765 FC9E  
                                   u941 F9CA                                     u781 FAA2  
                                   u861 F834                                     u854 F96A  
                                   u950 FB08                                     u790 FAC4  
                                   u870 F804                                     u855 F966  
                                   u951 FB04                                     u791 FAC0  
                                   u871 F800                                     u960 FB26  
                                   u880 F86C                                     u961 FB22  
                                   u881 F868                                     u970 FB44  
                                   u890 FBA4                                     u971 FB40  
                                   u891 FBA0                                     u980 F7D0  
                                   u981 F7CC                                     _btn 001F  
                                   prod 000FF3                                     wreg 000FE8  
           __size_of_robot_move_forward 0032            __size_of_robot_move_backward 0032  
                                  l1510 FDC2                                    l1502 FD12  
                                  l1520 FC36                                    l1504 FD58  
                                  l1600 F858                                    l1532 FCD0  
                                  l1508 FD98                                    l1612 F808  
                                  l1604 F7F2                                    l1700 F6F6  
                                  l1620 F85A                                    l1534 FCFA  
                                  l1526 FC4A                                    l1518 FC36  
                                  l1542 FA76                                    l1614 F824  
                                  l1606 F7F2                                    l1702 F78C  
                                  l1528 FC90                                    l1632 FB92  
                                  l1560 F9F6                                    l1552 FAC8  
                                  l1544 FA76                                    l1704 F75A  
                                  l1800 FE6E                                    l1650 F980  
                                  l1642 FBE4                                    l1634 FB92  
                                  l1570 FA48                                    l1562 F9F6  
                                  l1554 FAEA                                    l1546 FA88  
                                  l1626 F870                                    l1618 F85A  
                                  l1706 F8C4                                    l1810 FE90  
                                  l1802 FE70                                    l1580 F922  
                                  l1660 F9D2                                    l1652 F980  
                                  l1644 FC28                                    l1636 FBA4  
                                  l1572 FA6A                                    l1564 FA08  
                                  l1556 FAF4                                    l1548 FAA6  
                                  l1628 F88C                                    l1708 F8F4  
                                  l1820 FEA6                                    l1812 FE92  
                                  l1670 FB08                                    l1662 F9F4  
                                  l1654 F992                                    l1494 FCFE  
                                  l1646 FC32                                    l1638 FBC2  
                                  l1574 FA74                                    l1566 FA26  
                                  l1590 F826                                    l1830 FEF4  
                                  l1822 FEC2                                    l1814 FEA2  
                                  l1584 F938                                    l1680 FB90  
                                  l1672 FB26                                    l1656 F9B0  
                                  l1496 FCFE                                    l1592 F826  
                                  l1840 FF3C                                    l1832 FF04  
                                  l1824 FEC4                                    l1808 FE80  
                                  l1586 F97E                                    l1578 F912  
                                  l1666 FAF6                                    l1850 FF84  
                                  l1842 FF4C                                    l1834 FF14  
                                  l1826 FED4                                    l1770 FDF0  
                                  l1762 FDC4                                    l1676 FB48  
                                  l1668 FAF6                                    l1692 F7D4  
                                  l1684 F7BE                                    l1860 FFCC  
                                  l1852 FF94                                    l1844 FF5C  
                                  l1828 FEE4                                    l1836 FF1C  
                                  l1780 FE12                                    l1772 FDF8  
                                  l1764 FDD0                                    l1678 FB6E  
                                  l1694 F7F0                                    l1686 F7BE  
                                  l1598 F83C                                    l1862 FFDC  
                                  l1854 FFA4                                    l1838 FF2C  
                                  l1846 FF64                                    l1790 FE50  
                                  l1782 FE14                                    l1774 FE00  
                                  l1766 FDE2                                    l1864 FFEC  
                                  l1848 FF74                                    l1856 FFAC  
                                  l1792 FE58                                    l1784 FE30  
                                  l1776 FE02                                    l1768 FDE4  
                                  l1698 F728                                    l1858 FFBC  
                                  l1866 FFF4                                    l1794 FE60  
                                  l1786 FE42                                    l1778 FE0A  
                                  l1876 FDAC                                    l1796 FE62  
                                  l1788 FE44                                    l1878 FCE4  
                                  l1798 FE6A                                    u1100 FEE4  
                                  u1101 FEE0                                    u1110 FEF4  
                                  u1111 FEF0                                    u1200 FF94  
                                  u1120 FF04                                    u1201 FF90  
                                  u1121 FF00                                    u1210 FFA4  
                                  u1130 FF14                                    u1211 FFA0  
                                  u1131 FF10                                    u1220 FFBC  
                                  u1140 FF2C                                    u1221 FFB8  
                                  u1141 FF28                                    u1230 FFCC  
                                  u1150 FF3C                                    u1231 FFC8  
                                  u1151 FF38                                    u1240 FFDC  
                                  u1160 FF4C                                    u1080 FEA2  
                                  u1241 FFD8                                    u1161 FF48  
                                  u1081 FE9E                                    u1250 FFEC  
                                  u1170 FF5C                                    u1090 FED4  
                                  u1251 FFE8                                    u1171 FF58  
                                  u1091 FED0                                    u1180 FF74  
                                  u1181 FF70                                    _LATA 000F89  
                                  u1190 FF84                                    _LATB 000F8A  
                                  u1191 FF80                                    _LATC 000F8B  
                                  _LATD 000F8C                                    _LATE 000F8D  
                                  u1267 F8FE                                    _main FDC4  
                                  fsr2h 000FDA                                    indf2 000FDF  
                                  fsr1l 000FE1                   relay_initialize@relay 002C  
                                  fsr2l 000FD9                                    prodl 000FF3  
                                  start 0000                __size_of_robot_move_left 0032  
                          ___param_bank 000000       gpio_pin_direction_initialize@port 002B  
                  _gpio_pin_write_value FCFC                                   ?_main 0023  
                                 _PORTA 000F80                                   _PORTB 000F81  
                                 _PORTC 000F82                                   _PORTD 000F83  
                                 _PORTE 000F84                                   _TRISA 000F92  
                                 _TRISB 000F93                                   _TRISC 000F94  
                                 _TRISD 000F95                                   _TRISE 000F96  
                                 tablat 000FF5                     relay_turn_off@relay 002C  
                                 status 000FD8                       _button_get_status FAF6  
        ?_gpio_pin_direction_initialize 0023                      ?_button_get_status 002C  
                       __initialization F88E                   __end_of_relay_turn_on FAF6  
                          __end_of_main 0000                   ?_gpio_pin_write_value 0023  
              __end_of_robot_move_right F7BE                     ??_button_get_status 0030  
           __end_of_dc_motor_initialize F7F2                                  ??_main 0035  
                         __activetblptr 000002                       _button_initialize F980  
                    ?_button_initialize 002C               __end_of_button_get_status FB92  
         __size_of_dc_motor_rotate_left 0034                           _tris_register 0015  
                   ??_button_initialize 002E             dc_motor_rotate_left@dc_mtor 0030  
                     ??_robot_move_left 0033                                  clear_0 F8B4  
                        _relay_turn_off F9F6                                  _motor1 0040  
                                _motor2 003E                                  _motor3 003C  
                                _motor4 003A                            __pdataCOMRAM 0001  
             __end_of_button_initialize F9F6                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                     ?_relay_initialize 002C                      ??_relay_initialize 002E  
                            __accesstop 0060                 __end_of__initialization F8BA  
                         ___rparam_used 000001                          __pcstackCOMRAM 0023  
                ??_gpio_pin_write_value 0025                     _robot_move_backward F6F6  
                  button_initialize@btn 002C                  __end_of_relay_turn_off FA76  
             gpio_pin_read_status@logic 0024                    ?_robot_move_backward 0023  
                 _dc_motor_rotate_right F826              __size_of_button_get_status 009C  
                       ?_relay_turn_off 002C                gpio_pin_read_status@port 002B  
         __size_of_gpio_pin_read_status 0070              __end_of_robot_move_forward F75A  
            __size_of_button_initialize 0076                   ??_robot_move_backward 0033  
                __size_of_dc_motor_stop 0034                              _btn_status 0036  
                               __Hparam 0000                                 __Lparam 0000  
                               __pcinit F88E                                 __ramtop 1000  
                     ?_robot_move_right 0023                                 __ptext0 FDC4  
                               __ptext1 F8C4                                 __ptext2 F78C  
                               __ptext3 F75A                                 __ptext4 F85A  
                               __ptext5 F728                                 __ptext6 F826  
                               __ptext7 F6F6                                 __ptext8 F7F2  
                               __ptext9 FA76         ??_gpio_pin_direction_initialize 0025  
                    ??_robot_move_right 0033                  ?_dc_motor_rotate_right 0030  
                  end_of_initialization F8BA                           __Lmediumconst 0000  
                       _robot_move_left F75A                           _dc_motor_stop F85A  
                               postdec1 000FE5                                 postdec2 000FDD  
                               postinc0 000FEE                                 postinc2 000FDE  
          __end_of_dc_motor_rotate_left F826                              _robot_stop F8C4  
          __size_of_dc_motor_initialize 0034                  __size_of_relay_turn_on 0080  
                        ?_dc_motor_stop 0030               __size_of_relay_initialize 00A2  
gpio_pin_direction_initialize@direction 0024                           __pidataCOMRAM F6D4  
                    relay_turn_on@relay 002C                     start_initialization F88E  
                  button_get_status@btn 002C   __end_of_gpio_pin_direction_initialize FCFC  
__size_of_gpio_pin_direction_initialize 00C8           _gpio_pin_direction_initialize FC34  
               __end_of_robot_move_left F78C                            _lat_register 000B  
                      ??_relay_turn_off 002E                gpio_pin_write_value@port 002B  
                         _relay_turn_on FA76           __size_of_gpio_pin_write_value 00C8  
                           ?_robot_stop 0023                             __pbssCOMRAM 0035  
          __end_of_gpio_pin_read_status F980                    _dc_motor_rotate_left F7F2  
                    _robot_move_forward F728                         ??_dc_motor_stop 0032  
                   ?_robot_move_forward 0023                          ?_relay_turn_on 002C  
               gpio_pin_read_status@pin 0023             __end_of_robot_move_backward F728  
               ??_dc_motor_rotate_right 0032                    ??_robot_move_forward 0033  
                      ?_robot_move_left 0023               __size_of_robot_move_right 0032  
                 ?_dc_motor_rotate_left 0030                     __size_of_robot_stop 004C  
                      _relay_initialize FB92                     _dc_motor_initialize F7BE  
      gpio_pin_direction_initialize@pin 0023                    ?_dc_motor_initialize 0030  
                             copy_data0 F8A2               gpio_pin_write_value@logic 0024  
                              __Hrparam 0000                         ??_relay_turn_on 002E  
               gpio_pin_write_value@pin 0023                                __Lrparam 0000  
                  _gpio_pin_read_status F910                   ??_dc_motor_initialize 0032  
                              __ptext10 F9F6                                __ptext11 F7BE  
                              __ptext12 FB92                                __ptext13 FCFC  
                              __ptext14 F980                                __ptext15 FC34  
                              __ptext16 FAF6                                __ptext17 F910  
                ??_dc_motor_rotate_left 0032                           __size_of_main 023C  
                          ??_robot_stop 0033                   ?_gpio_pin_read_status 0023  
                  dc_motor_stop@dc_mtor 0030            __end_of_gpio_pin_write_value FDC4  
                      _robot_move_right F78C                      __end_of_robot_stop F910  
            dc_motor_initialize@dc_mtor 0030          __size_of_dc_motor_rotate_right 0034  
           button_get_status@btn_status 002E           __end_of_dc_motor_rotate_right F85A  
              __end_of_relay_initialize FC34                           _port_register 0001  
                 __end_of_dc_motor_stop F88E  
